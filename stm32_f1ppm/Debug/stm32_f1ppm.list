
stm32_f1ppm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002250  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800235c  0800235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  20000078  080024bc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000100  080024bc  00020100  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e234  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d77  00000000  00000000  0002e2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004801  00000000  00000000  0003004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000680  00000000  00000000  00034850  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d0  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000398c  00000000  00000000  000357a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002bd0  00000000  00000000  0003912c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bcfc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a48  00000000  00000000  0003bd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0003d7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  0003d844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002344 	.word	0x08002344

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002344 	.word	0x08002344

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000010 	.word	0x20000010
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f894 	bl	80012d8 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000b8 	.word	0x200000b8

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d6:	4616      	mov	r6, r2
 80002d8:	4b65      	ldr	r3, [pc, #404]	; (8000470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b0>
 80002de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000484 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d17f      	bne.n	80003f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f4:	684d      	ldr	r5, [r1, #4]
 80002f6:	2d12      	cmp	r5, #18
 80002f8:	f000 80af 	beq.w	800045a <HAL_GPIO_Init+0x18a>
 80002fc:	f200 8088 	bhi.w	8000410 <HAL_GPIO_Init+0x140>
 8000300:	2d02      	cmp	r5, #2
 8000302:	f000 80a7 	beq.w	8000454 <HAL_GPIO_Init+0x184>
 8000306:	d87c      	bhi.n	8000402 <HAL_GPIO_Init+0x132>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 808e 	beq.w	800042a <HAL_GPIO_Init+0x15a>
 800030e:	2d01      	cmp	r5, #1
 8000310:	f000 809e 	beq.w	8000450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	bf93      	iteet	ls
 800031c:	4682      	movls	sl, r0
 800031e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000322:	3d08      	subhi	r5, #8
 8000324:	f8d0 b000 	ldrls.w	fp, [r0]
 8000328:	bf92      	itee	ls
 800032a:	00b5      	lslls	r5, r6, #2
 800032c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000332:	fa09 f805 	lsl.w	r8, r9, r5
 8000336:	ea2b 0808 	bic.w	r8, fp, r8
 800033a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033e:	bf88      	it	hi
 8000340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000344:	ea48 0505 	orr.w	r5, r8, r5
 8000348:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800034c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000354:	d04e      	beq.n	80003f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4d47      	ldr	r5, [pc, #284]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 8000358:	4f46      	ldr	r7, [pc, #280]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 800035a:	69ad      	ldr	r5, [r5, #24]
 800035c:	f026 0803 	bic.w	r8, r6, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	61bd      	str	r5, [r7, #24]
 8000366:	69bd      	ldr	r5, [r7, #24]
 8000368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800036c:	f005 0501 	and.w	r5, r5, #1
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800038c:	4d3a      	ldr	r5, [pc, #232]	; (8000478 <HAL_GPIO_Init+0x1a8>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d068      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d066      	beq.n	8000468 <HAL_GPIO_Init+0x198>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d064      	beq.n	800046c <HAL_GPIO_Init+0x19c>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f4:	3601      	adds	r6, #1
 80003f6:	2e10      	cmp	r6, #16
 80003f8:	f47f af73 	bne.w	80002e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003fc:	b003      	add	sp, #12
 80003fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000402:	2d03      	cmp	r5, #3
 8000404:	d022      	beq.n	800044c <HAL_GPIO_Init+0x17c>
 8000406:	2d11      	cmp	r5, #17
 8000408:	d184      	bne.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040a:	68ca      	ldr	r2, [r1, #12]
 800040c:	3204      	adds	r2, #4
          break;
 800040e:	e781      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000410:	4f1a      	ldr	r7, [pc, #104]	; (800047c <HAL_GPIO_Init+0x1ac>)
 8000412:	42bd      	cmp	r5, r7
 8000414:	d009      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000416:	d812      	bhi.n	800043e <HAL_GPIO_Init+0x16e>
 8000418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000488 <HAL_GPIO_Init+0x1b8>
 800041c:	454d      	cmp	r5, r9
 800041e:	d004      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000424:	454d      	cmp	r5, r9
 8000426:	f47f af75 	bne.w	8000314 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	688a      	ldr	r2, [r1, #8]
 800042c:	b1c2      	cbz	r2, 8000460 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800042e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000430:	bf0c      	ite	eq
 8000432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043a:	2208      	movs	r2, #8
 800043c:	e76a      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043e:	4575      	cmp	r5, lr
 8000440:	d0f3      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000442:	4565      	cmp	r5, ip
 8000444:	d0f1      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800048c <HAL_GPIO_Init+0x1bc>
 800044a:	e7eb      	b.n	8000424 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800044c:	2200      	movs	r2, #0
 800044e:	e761      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
          break;
 8000452:	e75f      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000454:	68ca      	ldr	r2, [r1, #12]
 8000456:	3208      	adds	r2, #8
          break;
 8000458:	e75c      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800045a:	68ca      	ldr	r2, [r1, #12]
 800045c:	320c      	adds	r2, #12
          break;
 800045e:	e759      	b.n	8000314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000460:	2204      	movs	r2, #4
 8000462:	e757      	b.n	8000314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000464:	2500      	movs	r5, #0
 8000466:	e7a2      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000468:	2501      	movs	r5, #1
 800046a:	e7a0      	b.n	80003ae <HAL_GPIO_Init+0xde>
 800046c:	2502      	movs	r5, #2
 800046e:	e79e      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000470:	40010400 	.word	0x40010400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10210000 	.word	0x10210000
 8000480:	10310000 	.word	0x10310000
 8000484:	10320000 	.word	0x10320000
 8000488:	10110000 	.word	0x10110000
 800048c:	10220000 	.word	0x10220000

08000490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000490:	b10a      	cbz	r2, 8000496 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000492:	6101      	str	r1, [r0, #16]
 8000494:	4770      	bx	lr
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	e7fb      	b.n	8000492 <HAL_GPIO_WritePin+0x2>
	...

0800049c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049c:	6803      	ldr	r3, [r0, #0]
{
 800049e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a2:	07db      	lsls	r3, r3, #31
{
 80004a4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a6:	d410      	bmi.n	80004ca <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a8:	682b      	ldr	r3, [r5, #0]
 80004aa:	079f      	lsls	r7, r3, #30
 80004ac:	d45e      	bmi.n	800056c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ae:	682b      	ldr	r3, [r5, #0]
 80004b0:	0719      	lsls	r1, r3, #28
 80004b2:	f100 8095 	bmi.w	80005e0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004b6:	682b      	ldr	r3, [r5, #0]
 80004b8:	075a      	lsls	r2, r3, #29
 80004ba:	f100 80bf 	bmi.w	800063c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004be:	69ea      	ldr	r2, [r5, #28]
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 812d 	bne.w	8000720 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004c6:	2000      	movs	r0, #0
 80004c8:	e014      	b.n	80004f4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ca:	4c90      	ldr	r4, [pc, #576]	; (800070c <HAL_RCC_OscConfig+0x270>)
 80004cc:	6863      	ldr	r3, [r4, #4]
 80004ce:	f003 030c 	and.w	r3, r3, #12
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d007      	beq.n	80004e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004d6:	6863      	ldr	r3, [r4, #4]
 80004d8:	f003 030c 	and.w	r3, r3, #12
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d10c      	bne.n	80004fa <HAL_RCC_OscConfig+0x5e>
 80004e0:	6863      	ldr	r3, [r4, #4]
 80004e2:	03de      	lsls	r6, r3, #15
 80004e4:	d509      	bpl.n	80004fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	039c      	lsls	r4, r3, #14
 80004ea:	d5dd      	bpl.n	80004a8 <HAL_RCC_OscConfig+0xc>
 80004ec:	686b      	ldr	r3, [r5, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1da      	bne.n	80004a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004f2:	2001      	movs	r0, #1
}
 80004f4:	b002      	add	sp, #8
 80004f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fa:	686b      	ldr	r3, [r5, #4]
 80004fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000500:	d110      	bne.n	8000524 <HAL_RCC_OscConfig+0x88>
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000508:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050a:	f7ff fe61 	bl	80001d0 <HAL_GetTick>
 800050e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	0398      	lsls	r0, r3, #14
 8000514:	d4c8      	bmi.n	80004a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000516:	f7ff fe5b 	bl	80001d0 <HAL_GetTick>
 800051a:	1b80      	subs	r0, r0, r6
 800051c:	2864      	cmp	r0, #100	; 0x64
 800051e:	d9f7      	bls.n	8000510 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000520:	2003      	movs	r0, #3
 8000522:	e7e7      	b.n	80004f4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000524:	b99b      	cbnz	r3, 800054e <HAL_RCC_OscConfig+0xb2>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052c:	6023      	str	r3, [r4, #0]
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000534:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000536:	f7ff fe4b 	bl	80001d0 <HAL_GetTick>
 800053a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	0399      	lsls	r1, r3, #14
 8000540:	d5b2      	bpl.n	80004a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000542:	f7ff fe45 	bl	80001d0 <HAL_GetTick>
 8000546:	1b80      	subs	r0, r0, r6
 8000548:	2864      	cmp	r0, #100	; 0x64
 800054a:	d9f7      	bls.n	800053c <HAL_RCC_OscConfig+0xa0>
 800054c:	e7e8      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	d103      	bne.n	800055e <HAL_RCC_OscConfig+0xc2>
 8000556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055a:	6023      	str	r3, [r4, #0]
 800055c:	e7d1      	b.n	8000502 <HAL_RCC_OscConfig+0x66>
 800055e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056a:	e7cd      	b.n	8000508 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800056c:	4c67      	ldr	r4, [pc, #412]	; (800070c <HAL_RCC_OscConfig+0x270>)
 800056e:	6863      	ldr	r3, [r4, #4]
 8000570:	f013 0f0c 	tst.w	r3, #12
 8000574:	d007      	beq.n	8000586 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000576:	6863      	ldr	r3, [r4, #4]
 8000578:	f003 030c 	and.w	r3, r3, #12
 800057c:	2b08      	cmp	r3, #8
 800057e:	d110      	bne.n	80005a2 <HAL_RCC_OscConfig+0x106>
 8000580:	6863      	ldr	r3, [r4, #4]
 8000582:	03da      	lsls	r2, r3, #15
 8000584:	d40d      	bmi.n	80005a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	079b      	lsls	r3, r3, #30
 800058a:	d502      	bpl.n	8000592 <HAL_RCC_OscConfig+0xf6>
 800058c:	692b      	ldr	r3, [r5, #16]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1af      	bne.n	80004f2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	696a      	ldr	r2, [r5, #20]
 8000596:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800059a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800059e:	6023      	str	r3, [r4, #0]
 80005a0:	e785      	b.n	80004ae <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a2:	692a      	ldr	r2, [r5, #16]
 80005a4:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <HAL_RCC_OscConfig+0x274>)
 80005a6:	b16a      	cbz	r2, 80005c4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ac:	f7ff fe10 	bl	80001d0 <HAL_GetTick>
 80005b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	079f      	lsls	r7, r3, #30
 80005b6:	d4ec      	bmi.n	8000592 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005b8:	f7ff fe0a 	bl	80001d0 <HAL_GetTick>
 80005bc:	1b80      	subs	r0, r0, r6
 80005be:	2802      	cmp	r0, #2
 80005c0:	d9f7      	bls.n	80005b2 <HAL_RCC_OscConfig+0x116>
 80005c2:	e7ad      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c6:	f7ff fe03 	bl	80001d0 <HAL_GetTick>
 80005ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	0798      	lsls	r0, r3, #30
 80005d0:	f57f af6d 	bpl.w	80004ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d4:	f7ff fdfc 	bl	80001d0 <HAL_GetTick>
 80005d8:	1b80      	subs	r0, r0, r6
 80005da:	2802      	cmp	r0, #2
 80005dc:	d9f6      	bls.n	80005cc <HAL_RCC_OscConfig+0x130>
 80005de:	e79f      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e0:	69aa      	ldr	r2, [r5, #24]
 80005e2:	4c4a      	ldr	r4, [pc, #296]	; (800070c <HAL_RCC_OscConfig+0x270>)
 80005e4:	4b4b      	ldr	r3, [pc, #300]	; (8000714 <HAL_RCC_OscConfig+0x278>)
 80005e6:	b1da      	cbz	r2, 8000620 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ec:	f7ff fdf0 	bl	80001d0 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f4:	079b      	lsls	r3, r3, #30
 80005f6:	d50d      	bpl.n	8000614 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <HAL_RCC_OscConfig+0x27c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	fbb3 f3f2 	udiv	r3, r3, r2
 8000604:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000606:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f9      	bne.n	8000606 <HAL_RCC_OscConfig+0x16a>
 8000612:	e750      	b.n	80004b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000614:	f7ff fddc 	bl	80001d0 <HAL_GetTick>
 8000618:	1b80      	subs	r0, r0, r6
 800061a:	2802      	cmp	r0, #2
 800061c:	d9e9      	bls.n	80005f2 <HAL_RCC_OscConfig+0x156>
 800061e:	e77f      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000620:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000622:	f7ff fdd5 	bl	80001d0 <HAL_GetTick>
 8000626:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800062a:	079f      	lsls	r7, r3, #30
 800062c:	f57f af43 	bpl.w	80004b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000630:	f7ff fdce 	bl	80001d0 <HAL_GetTick>
 8000634:	1b80      	subs	r0, r0, r6
 8000636:	2802      	cmp	r0, #2
 8000638:	d9f6      	bls.n	8000628 <HAL_RCC_OscConfig+0x18c>
 800063a:	e771      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800063c:	4c33      	ldr	r4, [pc, #204]	; (800070c <HAL_RCC_OscConfig+0x270>)
 800063e:	69e3      	ldr	r3, [r4, #28]
 8000640:	00d8      	lsls	r0, r3, #3
 8000642:	d424      	bmi.n	800068e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000644:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	69e3      	ldr	r3, [r4, #28]
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61e3      	str	r3, [r4, #28]
 800064e:	69e3      	ldr	r3, [r4, #28]
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000658:	4e30      	ldr	r6, [pc, #192]	; (800071c <HAL_RCC_OscConfig+0x280>)
 800065a:	6833      	ldr	r3, [r6, #0]
 800065c:	05d9      	lsls	r1, r3, #23
 800065e:	d518      	bpl.n	8000692 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000660:	68eb      	ldr	r3, [r5, #12]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d126      	bne.n	80006b4 <HAL_RCC_OscConfig+0x218>
 8000666:	6a23      	ldr	r3, [r4, #32]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800066e:	f7ff fdaf 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000672:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000676:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000678:	6a23      	ldr	r3, [r4, #32]
 800067a:	079b      	lsls	r3, r3, #30
 800067c:	d53f      	bpl.n	80006fe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800067e:	2f00      	cmp	r7, #0
 8000680:	f43f af1d 	beq.w	80004be <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000684:	69e3      	ldr	r3, [r4, #28]
 8000686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068a:	61e3      	str	r3, [r4, #28]
 800068c:	e717      	b.n	80004be <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800068e:	2700      	movs	r7, #0
 8000690:	e7e2      	b.n	8000658 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000692:	6833      	ldr	r3, [r6, #0]
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069a:	f7ff fd99 	bl	80001d0 <HAL_GetTick>
 800069e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a0:	6833      	ldr	r3, [r6, #0]
 80006a2:	05da      	lsls	r2, r3, #23
 80006a4:	d4dc      	bmi.n	8000660 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006a6:	f7ff fd93 	bl	80001d0 <HAL_GetTick>
 80006aa:	eba0 0008 	sub.w	r0, r0, r8
 80006ae:	2864      	cmp	r0, #100	; 0x64
 80006b0:	d9f6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x204>
 80006b2:	e735      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b4:	b9ab      	cbnz	r3, 80006e2 <HAL_RCC_OscConfig+0x246>
 80006b6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6223      	str	r3, [r4, #32]
 80006c2:	6a23      	ldr	r3, [r4, #32]
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ca:	f7ff fd81 	bl	80001d0 <HAL_GetTick>
 80006ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d0:	6a23      	ldr	r3, [r4, #32]
 80006d2:	0798      	lsls	r0, r3, #30
 80006d4:	d5d3      	bpl.n	800067e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006d6:	f7ff fd7b 	bl	80001d0 <HAL_GetTick>
 80006da:	1b80      	subs	r0, r0, r6
 80006dc:	4540      	cmp	r0, r8
 80006de:	d9f7      	bls.n	80006d0 <HAL_RCC_OscConfig+0x234>
 80006e0:	e71e      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	d103      	bne.n	80006f0 <HAL_RCC_OscConfig+0x254>
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6223      	str	r3, [r4, #32]
 80006ee:	e7ba      	b.n	8000666 <HAL_RCC_OscConfig+0x1ca>
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	6223      	str	r3, [r4, #32]
 80006f6:	6a23      	ldr	r3, [r4, #32]
 80006f8:	f023 0304 	bic.w	r3, r3, #4
 80006fc:	e7b6      	b.n	800066c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd67 	bl	80001d0 <HAL_GetTick>
 8000702:	eba0 0008 	sub.w	r0, r0, r8
 8000706:	42b0      	cmp	r0, r6
 8000708:	d9b6      	bls.n	8000678 <HAL_RCC_OscConfig+0x1dc>
 800070a:	e709      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
 800070c:	40021000 	.word	0x40021000
 8000710:	42420000 	.word	0x42420000
 8000714:	42420480 	.word	0x42420480
 8000718:	20000010 	.word	0x20000010
 800071c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000720:	4c22      	ldr	r4, [pc, #136]	; (80007ac <HAL_RCC_OscConfig+0x310>)
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	f003 030c 	and.w	r3, r3, #12
 8000728:	2b08      	cmp	r3, #8
 800072a:	f43f aee2 	beq.w	80004f2 <HAL_RCC_OscConfig+0x56>
 800072e:	2300      	movs	r3, #0
 8000730:	4e1f      	ldr	r6, [pc, #124]	; (80007b0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000732:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000734:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000736:	d12b      	bne.n	8000790 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000738:	f7ff fd4a 	bl	80001d0 <HAL_GetTick>
 800073c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	0199      	lsls	r1, r3, #6
 8000742:	d41f      	bmi.n	8000784 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000744:	6a2b      	ldr	r3, [r5, #32]
 8000746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074a:	d105      	bne.n	8000758 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800074c:	6862      	ldr	r2, [r4, #4]
 800074e:	68a9      	ldr	r1, [r5, #8]
 8000750:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000754:	430a      	orrs	r2, r1
 8000756:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000758:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800075a:	6862      	ldr	r2, [r4, #4]
 800075c:	430b      	orrs	r3, r1
 800075e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000762:	4313      	orrs	r3, r2
 8000764:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000766:	2301      	movs	r3, #1
 8000768:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fd31 	bl	80001d0 <HAL_GetTick>
 800076e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	019a      	lsls	r2, r3, #6
 8000774:	f53f aea7 	bmi.w	80004c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000778:	f7ff fd2a 	bl	80001d0 <HAL_GetTick>
 800077c:	1b40      	subs	r0, r0, r5
 800077e:	2802      	cmp	r0, #2
 8000780:	d9f6      	bls.n	8000770 <HAL_RCC_OscConfig+0x2d4>
 8000782:	e6cd      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000784:	f7ff fd24 	bl	80001d0 <HAL_GetTick>
 8000788:	1bc0      	subs	r0, r0, r7
 800078a:	2802      	cmp	r0, #2
 800078c:	d9d7      	bls.n	800073e <HAL_RCC_OscConfig+0x2a2>
 800078e:	e6c7      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000790:	f7ff fd1e 	bl	80001d0 <HAL_GetTick>
 8000794:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	019b      	lsls	r3, r3, #6
 800079a:	f57f ae94 	bpl.w	80004c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079e:	f7ff fd17 	bl	80001d0 <HAL_GetTick>
 80007a2:	1b40      	subs	r0, r0, r5
 80007a4:	2802      	cmp	r0, #2
 80007a6:	d9f6      	bls.n	8000796 <HAL_RCC_OscConfig+0x2fa>
 80007a8:	e6ba      	b.n	8000520 <HAL_RCC_OscConfig+0x84>
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	42420060 	.word	0x42420060

080007b4 <HAL_RCC_GetSysClockFreq>:
{
 80007b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ba:	ac02      	add	r4, sp, #8
 80007bc:	f103 0510 	add.w	r5, r3, #16
 80007c0:	4622      	mov	r2, r4
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	6859      	ldr	r1, [r3, #4]
 80007c6:	3308      	adds	r3, #8
 80007c8:	c203      	stmia	r2!, {r0, r1}
 80007ca:	42ab      	cmp	r3, r5
 80007cc:	4614      	mov	r4, r2
 80007ce:	d1f7      	bne.n	80007c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007d0:	2301      	movs	r3, #1
 80007d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80007d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007d8:	4911      	ldr	r1, [pc, #68]	; (8000820 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007e0:	f003 020c 	and.w	r2, r3, #12
 80007e4:	2a08      	cmp	r2, #8
 80007e6:	d117      	bne.n	8000818 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007ec:	a806      	add	r0, sp, #24
 80007ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f6:	d50c      	bpl.n	8000812 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000800:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000802:	aa06      	add	r2, sp, #24
 8000804:	4413      	add	r3, r2
 8000806:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800080e:	b007      	add	sp, #28
 8000810:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <HAL_RCC_GetSysClockFreq+0x74>)
 8000814:	4350      	muls	r0, r2
 8000816:	e7fa      	b.n	800080e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800081a:	e7f8      	b.n	800080e <HAL_RCC_GetSysClockFreq+0x5a>
 800081c:	0800235c 	.word	0x0800235c
 8000820:	40021000 	.word	0x40021000
 8000824:	007a1200 	.word	0x007a1200
 8000828:	003d0900 	.word	0x003d0900

0800082c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800082c:	4a4d      	ldr	r2, [pc, #308]	; (8000964 <HAL_RCC_ClockConfig+0x138>)
{
 800082e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000832:	6813      	ldr	r3, [r2, #0]
{
 8000834:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	428b      	cmp	r3, r1
{
 800083c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083e:	d328      	bcc.n	8000892 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000840:	682a      	ldr	r2, [r5, #0]
 8000842:	0791      	lsls	r1, r2, #30
 8000844:	d432      	bmi.n	80008ac <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000846:	07d2      	lsls	r2, r2, #31
 8000848:	d438      	bmi.n	80008bc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	4a46      	ldr	r2, [pc, #280]	; (8000964 <HAL_RCC_ClockConfig+0x138>)
 800084c:	6813      	ldr	r3, [r2, #0]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	429e      	cmp	r6, r3
 8000854:	d373      	bcc.n	800093e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000856:	682a      	ldr	r2, [r5, #0]
 8000858:	4c43      	ldr	r4, [pc, #268]	; (8000968 <HAL_RCC_ClockConfig+0x13c>)
 800085a:	f012 0f04 	tst.w	r2, #4
 800085e:	d179      	bne.n	8000954 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000860:	0713      	lsls	r3, r2, #28
 8000862:	d506      	bpl.n	8000872 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	692a      	ldr	r2, [r5, #16]
 8000868:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800086c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000870:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000872:	f7ff ff9f 	bl	80007b4 <HAL_RCC_GetSysClockFreq>
 8000876:	6863      	ldr	r3, [r4, #4]
 8000878:	4a3c      	ldr	r2, [pc, #240]	; (800096c <HAL_RCC_ClockConfig+0x140>)
 800087a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	40d8      	lsrs	r0, r3
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <HAL_RCC_ClockConfig+0x144>)
 8000884:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fc60 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
}
 800088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000892:	6813      	ldr	r3, [r2, #0]
 8000894:	f023 0307 	bic.w	r3, r3, #7
 8000898:	430b      	orrs	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800089c:	6813      	ldr	r3, [r2, #0]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	4299      	cmp	r1, r3
 80008a4:	d0cc      	beq.n	8000840 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008a6:	2001      	movs	r0, #1
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008ac:	492e      	ldr	r1, [pc, #184]	; (8000968 <HAL_RCC_ClockConfig+0x13c>)
 80008ae:	68a8      	ldr	r0, [r5, #8]
 80008b0:	684b      	ldr	r3, [r1, #4]
 80008b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008b6:	4303      	orrs	r3, r0
 80008b8:	604b      	str	r3, [r1, #4]
 80008ba:	e7c4      	b.n	8000846 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008bc:	686a      	ldr	r2, [r5, #4]
 80008be:	4c2a      	ldr	r4, [pc, #168]	; (8000968 <HAL_RCC_ClockConfig+0x13c>)
 80008c0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c4:	d11c      	bne.n	8000900 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ca:	d0ec      	beq.n	80008a6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008cc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d2:	f023 0303 	bic.w	r3, r3, #3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008da:	f7ff fc79 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008de:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008e0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d114      	bne.n	8000910 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008e6:	6863      	ldr	r3, [r4, #4]
 80008e8:	f003 030c 	and.w	r3, r3, #12
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d0ac      	beq.n	800084a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f0:	f7ff fc6e 	bl	80001d0 <HAL_GetTick>
 80008f4:	1bc0      	subs	r0, r0, r7
 80008f6:	4540      	cmp	r0, r8
 80008f8:	d9f5      	bls.n	80008e6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80008fa:	2003      	movs	r0, #3
 80008fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000900:	2a02      	cmp	r2, #2
 8000902:	d102      	bne.n	800090a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000904:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000908:	e7df      	b.n	80008ca <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090a:	f013 0f02 	tst.w	r3, #2
 800090e:	e7dc      	b.n	80008ca <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000910:	2b02      	cmp	r3, #2
 8000912:	d10f      	bne.n	8000934 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b08      	cmp	r3, #8
 800091c:	d095      	beq.n	800084a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091e:	f7ff fc57 	bl	80001d0 <HAL_GetTick>
 8000922:	1bc0      	subs	r0, r0, r7
 8000924:	4540      	cmp	r0, r8
 8000926:	d9f5      	bls.n	8000914 <HAL_RCC_ClockConfig+0xe8>
 8000928:	e7e7      	b.n	80008fa <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092a:	f7ff fc51 	bl	80001d0 <HAL_GetTick>
 800092e:	1bc0      	subs	r0, r0, r7
 8000930:	4540      	cmp	r0, r8
 8000932:	d8e2      	bhi.n	80008fa <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	f013 0f0c 	tst.w	r3, #12
 800093a:	d1f6      	bne.n	800092a <HAL_RCC_ClockConfig+0xfe>
 800093c:	e785      	b.n	800084a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	4333      	orrs	r3, r6
 8000946:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	429e      	cmp	r6, r3
 8000950:	d1a9      	bne.n	80008a6 <HAL_RCC_ClockConfig+0x7a>
 8000952:	e780      	b.n	8000856 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	68e9      	ldr	r1, [r5, #12]
 8000958:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800095c:	430b      	orrs	r3, r1
 800095e:	6063      	str	r3, [r4, #4]
 8000960:	e77e      	b.n	8000860 <HAL_RCC_ClockConfig+0x34>
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000
 8000968:	40021000 	.word	0x40021000
 800096c:	08002391 	.word	0x08002391
 8000970:	20000010 	.word	0x20000010

08000974 <HAL_RCC_GetHCLKFreq>:
}
 8000974:	4b01      	ldr	r3, [pc, #4]	; (800097c <HAL_RCC_GetHCLKFreq+0x8>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000010 	.word	0x20000010

08000980 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000980:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8000982:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000984:	689a      	ldr	r2, [r3, #8]
{
 8000986:	b530      	push	{r4, r5, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 8000988:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800098c:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800098e:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8000990:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8000994:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8000996:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8000998:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800099a:	d021      	beq.n	80009e0 <TIM_SlaveTimer_SetConfig+0x60>
 800099c:	d802      	bhi.n	80009a4 <TIM_SlaveTimer_SetConfig+0x24>
 800099e:	2840      	cmp	r0, #64	; 0x40
 80009a0:	d010      	beq.n	80009c4 <TIM_SlaveTimer_SetConfig+0x44>
 80009a2:	bd30      	pop	{r4, r5, pc}
 80009a4:	2860      	cmp	r0, #96	; 0x60
 80009a6:	d02d      	beq.n	8000a04 <TIM_SlaveTimer_SetConfig+0x84>
 80009a8:	2870      	cmp	r0, #112	; 0x70
 80009aa:	d13d      	bne.n	8000a28 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80009ac:	68ca      	ldr	r2, [r1, #12]
 80009ae:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80009b0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80009b2:	6909      	ldr	r1, [r1, #16]
 80009b4:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80009b6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80009ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80009be:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 80009c4:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80009c6:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80009c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80009d0:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80009d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80009d6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80009da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80009dc:	6218      	str	r0, [r3, #32]
    break;
 80009de:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80009e0:	6888      	ldr	r0, [r1, #8]
 80009e2:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80009e4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80009e6:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80009e8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80009ec:	f024 0401 	bic.w	r4, r4, #1
 80009f0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80009f2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80009f4:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80009f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80009fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80009fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a00:	6219      	str	r1, [r3, #32]
 8000a02:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a04:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a06:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a08:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a0c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a0e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a10:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a12:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a14:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a1c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a20:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8000a24:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a26:	621a      	str	r2, [r3, #32]
 8000a28:	bd30      	pop	{r4, r5, pc}

08000a2a <HAL_TIM_IC_MspInit>:
 8000a2a:	4770      	bx	lr

08000a2c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000a2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	f04f 0302 	mov.w	r3, #2
 8000a38:	d01c      	beq.n	8000a74 <HAL_TIM_ConfigClockSource+0x48>
 8000a3a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000a3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000a40:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a42:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a46:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a48:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a4c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a50:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000a52:	680a      	ldr	r2, [r1, #0]
 8000a54:	2a40      	cmp	r2, #64	; 0x40
 8000a56:	d079      	beq.n	8000b4c <HAL_TIM_ConfigClockSource+0x120>
 8000a58:	d819      	bhi.n	8000a8e <HAL_TIM_ConfigClockSource+0x62>
 8000a5a:	2a10      	cmp	r2, #16
 8000a5c:	f000 8093 	beq.w	8000b86 <HAL_TIM_ConfigClockSource+0x15a>
 8000a60:	d80a      	bhi.n	8000a78 <HAL_TIM_ConfigClockSource+0x4c>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	f000 8089 	beq.w	8000b7a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000a74:	4618      	mov	r0, r3
}
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a78:	2a20      	cmp	r2, #32
 8000a7a:	f000 808a 	beq.w	8000b92 <HAL_TIM_ConfigClockSource+0x166>
 8000a7e:	2a30      	cmp	r2, #48	; 0x30
 8000a80:	d1f2      	bne.n	8000a68 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8000a82:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a88:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a8c:	e036      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a8e:	2a70      	cmp	r2, #112	; 0x70
 8000a90:	d036      	beq.n	8000b00 <HAL_TIM_ConfigClockSource+0xd4>
 8000a92:	d81b      	bhi.n	8000acc <HAL_TIM_ConfigClockSource+0xa0>
 8000a94:	2a50      	cmp	r2, #80	; 0x50
 8000a96:	d042      	beq.n	8000b1e <HAL_TIM_ConfigClockSource+0xf2>
 8000a98:	2a60      	cmp	r2, #96	; 0x60
 8000a9a:	d1e5      	bne.n	8000a68 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a9c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a9e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000aa0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000aa4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000aa6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000aa8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000aaa:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000aac:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ab4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ab8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000abc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000abe:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ac0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ac2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ac6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000aca:	e017      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000acc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ad0:	d011      	beq.n	8000af6 <HAL_TIM_ConfigClockSource+0xca>
 8000ad2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ad6:	d1c7      	bne.n	8000a68 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ad8:	688a      	ldr	r2, [r1, #8]
 8000ada:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000adc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ade:	68c9      	ldr	r1, [r1, #12]
 8000ae0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ae2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ae6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000aea:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000aec:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000af4:	e002      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	e7b3      	b.n	8000a68 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b00:	688a      	ldr	r2, [r1, #8]
 8000b02:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000b04:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b06:	68c9      	ldr	r1, [r1, #12]
 8000b08:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b0a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b12:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000b14:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000b16:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000b18:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000b1c:	e7ee      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b1e:	684c      	ldr	r4, [r1, #4]
 8000b20:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b22:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b24:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b26:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b2a:	f025 0501 	bic.w	r5, r5, #1
 8000b2e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b30:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b32:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b38:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b3e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b40:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b46:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b4a:	e7d7      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b4c:	684c      	ldr	r4, [r1, #4]
 8000b4e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b50:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b52:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b54:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b58:	f025 0501 	bic.w	r5, r5, #1
 8000b5c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b5e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b60:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b66:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b6c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b6e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b74:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b78:	e7c0      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b7a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b80:	f042 0207 	orr.w	r2, r2, #7
 8000b84:	e7ba      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b86:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b8c:	f042 0217 	orr.w	r2, r2, #23
 8000b90:	e7b4      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b92:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b98:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b9c:	e7ae      	b.n	8000afc <HAL_TIM_ConfigClockSource+0xd0>

08000b9e <HAL_TIM_SlaveConfigSynchronization>:
{
 8000b9e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000ba0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000ba4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	f04f 0302 	mov.w	r3, #2
 8000bac:	d015      	beq.n	8000bda <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8000bae:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000bb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000bb4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8000bb8:	f7ff fee2 	bl	8000980 <TIM_SlaveTimer_SetConfig>
  __HAL_UNLOCK(htim);
 8000bbc:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bc6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bce:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8000bd0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000bd4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8000bda:	4618      	mov	r0, r3
    }
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}

08000bde <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8000bde:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d01c      	beq.n	8000c20 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8000be6:	290c      	cmp	r1, #12
 8000be8:	d818      	bhi.n	8000c1c <HAL_TIM_ReadCapturedValue+0x3e>
 8000bea:	e8df f001 	tbb	[pc, r1]
 8000bee:	1707      	.short	0x1707
 8000bf0:	170e1717 	.word	0x170e1717
 8000bf4:	17111717 	.word	0x17111717
 8000bf8:	1717      	.short	0x1717
 8000bfa:	14          	.byte	0x14
 8000bfb:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8000bfc:	6803      	ldr	r3, [r0, #0]
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8000c0a:	6803      	ldr	r3, [r0, #0]
 8000c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8000c0e:	e7f7      	b.n	8000c00 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 8000c10:	6803      	ldr	r3, [r0, #0]
 8000c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 8000c14:	e7f4      	b.n	8000c00 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 8000c16:	6803      	ldr	r3, [r0, #0]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8000c1a:	e7f1      	b.n	8000c00 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e7ef      	b.n	8000c00 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8000c20:	2302      	movs	r3, #2
 8000c22:	e7f0      	b.n	8000c06 <HAL_TIM_ReadCapturedValue+0x28>

08000c24 <HAL_TIM_PeriodElapsedCallback>:
 8000c24:	4770      	bx	lr

08000c26 <HAL_TIM_OC_DelayElapsedCallback>:
 8000c26:	4770      	bx	lr

08000c28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000c28:	4770      	bx	lr

08000c2a <HAL_TIM_TriggerCallback>:
 8000c2a:	4770      	bx	lr

08000c2c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c2c:	6803      	ldr	r3, [r0, #0]
{
 8000c2e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c30:	691a      	ldr	r2, [r3, #16]
{
 8000c32:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c34:	0791      	lsls	r1, r2, #30
 8000c36:	d50e      	bpl.n	8000c56 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	0792      	lsls	r2, r2, #30
 8000c3c:	d50b      	bpl.n	8000c56 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000c3e:	f06f 0202 	mvn.w	r2, #2
 8000c42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c44:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c46:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c48:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c4a:	079b      	lsls	r3, r3, #30
 8000c4c:	d077      	beq.n	8000d3e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000c4e:	f000 fa09 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c52:	2300      	movs	r3, #0
 8000c54:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	0750      	lsls	r0, r2, #29
 8000c5c:	d510      	bpl.n	8000c80 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	0751      	lsls	r1, r2, #29
 8000c62:	d50d      	bpl.n	8000c80 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000c64:	f06f 0204 	mvn.w	r2, #4
 8000c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c6a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c6e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c70:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000c74:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c76:	d068      	beq.n	8000d4a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c78:	f000 f9f4 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	0712      	lsls	r2, r2, #28
 8000c86:	d50f      	bpl.n	8000ca8 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	0710      	lsls	r0, r2, #28
 8000c8c:	d50c      	bpl.n	8000ca8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c8e:	f06f 0208 	mvn.w	r2, #8
 8000c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c94:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c98:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c9a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000c9c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c9e:	d05a      	beq.n	8000d56 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ca0:	f000 f9e0 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	06d2      	lsls	r2, r2, #27
 8000cae:	d510      	bpl.n	8000cd2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	06d0      	lsls	r0, r2, #27
 8000cb4:	d50d      	bpl.n	8000cd2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000cb6:	f06f 0210 	mvn.w	r2, #16
 8000cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000cbc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000cc0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cc2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000cc6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cc8:	d04b      	beq.n	8000d62 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000cca:	f000 f9cb 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	07d1      	lsls	r1, r2, #31
 8000cd8:	d508      	bpl.n	8000cec <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	07d2      	lsls	r2, r2, #31
 8000cde:	d505      	bpl.n	8000cec <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ce0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ce4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ce6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ce8:	f7ff ff9c 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	0610      	lsls	r0, r2, #24
 8000cf2:	d508      	bpl.n	8000d06 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	0611      	lsls	r1, r2, #24
 8000cf8:	d505      	bpl.n	8000d06 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000cfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000cfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000d02:	f000 f9ae 	bl	8001062 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	0652      	lsls	r2, r2, #25
 8000d0c:	d508      	bpl.n	8000d20 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	0650      	lsls	r0, r2, #25
 8000d12:	d505      	bpl.n	8000d20 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000d18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000d1c:	f7ff ff85 	bl	8000c2a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	0691      	lsls	r1, r2, #26
 8000d26:	d522      	bpl.n	8000d6e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	0692      	lsls	r2, r2, #26
 8000d2c:	d51f      	bpl.n	8000d6e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d2e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000d32:	4620      	mov	r0, r4
}
 8000d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000d3a:	f000 b991 	b.w	8001060 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d3e:	f7ff ff72 	bl	8000c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d42:	4620      	mov	r0, r4
 8000d44:	f7ff ff70 	bl	8000c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d48:	e783      	b.n	8000c52 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d4a:	f7ff ff6c 	bl	8000c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f7ff ff6a 	bl	8000c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d54:	e792      	b.n	8000c7c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d56:	f7ff ff66 	bl	8000c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff ff64 	bl	8000c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d60:	e7a0      	b.n	8000ca4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d62:	f7ff ff60 	bl	8000c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff ff5e 	bl	8000c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d6c:	e7af      	b.n	8000cce <HAL_TIM_IRQHandler+0xa2>
 8000d6e:	bd10      	pop	{r4, pc}

08000d70 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000d72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d74:	4290      	cmp	r0, r2
 8000d76:	d00a      	beq.n	8000d8e <TIM_Base_SetConfig+0x1e>
 8000d78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d7c:	d007      	beq.n	8000d8e <TIM_Base_SetConfig+0x1e>
 8000d7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d82:	4290      	cmp	r0, r2
 8000d84:	d003      	beq.n	8000d8e <TIM_Base_SetConfig+0x1e>
 8000d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d115      	bne.n	8000dba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000d8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d94:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <TIM_Base_SetConfig+0x6c>)
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d00a      	beq.n	8000db2 <TIM_Base_SetConfig+0x42>
 8000d9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000da0:	d007      	beq.n	8000db2 <TIM_Base_SetConfig+0x42>
 8000da2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d003      	beq.n	8000db2 <TIM_Base_SetConfig+0x42>
 8000daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d103      	bne.n	8000dba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000db2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000db8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000dba:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000dc0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000dc2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000dc4:	688b      	ldr	r3, [r1, #8]
 8000dc6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000dc8:	680b      	ldr	r3, [r1, #0]
 8000dca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <TIM_Base_SetConfig+0x6c>)
 8000dce:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000dd0:	bf04      	itt	eq
 8000dd2:	690b      	ldreq	r3, [r1, #16]
 8000dd4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	6143      	str	r3, [r0, #20]
 8000dda:	4770      	bx	lr
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <HAL_TIM_Base_Init>:
{
 8000de0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000de2:	4604      	mov	r4, r0
 8000de4:	b1a0      	cbz	r0, 8000e10 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000de6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000dea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dee:	b91b      	cbnz	r3, 8000df8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000df0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000df4:	f000 fab6 	bl	8001364 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000df8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dfa:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000dfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e00:	1d21      	adds	r1, r4, #4
 8000e02:	f7ff ffb5 	bl	8000d70 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000e06:	2301      	movs	r3, #1
  return HAL_OK;
 8000e08:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000e0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e10:	2001      	movs	r0, #1
}
 8000e12:	bd10      	pop	{r4, pc}

08000e14 <HAL_TIM_IC_Init>:
{
 8000e14:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000e16:	4604      	mov	r4, r0
 8000e18:	b1a0      	cbz	r0, 8000e44 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e22:	b91b      	cbnz	r3, 8000e2c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000e24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8000e28:	f7ff fdff 	bl	8000a2a <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000e2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e2e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000e30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e34:	1d21      	adds	r1, r4, #4
 8000e36:	f7ff ff9b 	bl	8000d70 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000e3a:	2301      	movs	r3, #1
  return HAL_OK;
 8000e3c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
}
 8000e46:	bd10      	pop	{r4, pc}

08000e48 <TIM_TI1_SetConfig>:
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e4a:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8000e4c:	4e12      	ldr	r6, [pc, #72]	; (8000e98 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e4e:	f024 0401 	bic.w	r4, r4, #1
 8000e52:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8000e54:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8000e56:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000e58:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8000e5a:	d00a      	beq.n	8000e72 <TIM_TI1_SetConfig+0x2a>
 8000e5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e60:	d007      	beq.n	8000e72 <TIM_TI1_SetConfig+0x2a>
 8000e62:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8000e66:	42b0      	cmp	r0, r6
 8000e68:	d003      	beq.n	8000e72 <TIM_TI1_SetConfig+0x2a>
 8000e6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e6e:	42b0      	cmp	r0, r6
 8000e70:	d10f      	bne.n	8000e92 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8000e72:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8000e76:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8000e78:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8000e7e:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000e80:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000e84:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8000e88:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000e8a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8000e8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e8e:	6201      	str	r1, [r0, #32]
}
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8000e92:	f044 0201 	orr.w	r2, r4, #1
 8000e96:	e7ef      	b.n	8000e78 <TIM_TI1_SetConfig+0x30>
 8000e98:	40012c00 	.word	0x40012c00

08000e9c <HAL_TIM_IC_ConfigChannel>:
{
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000e9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000ea2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000ea4:	2b01      	cmp	r3, #1
{
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000eac:	d019      	beq.n	8000ee2 <HAL_TIM_IC_ConfigChannel+0x46>
 8000eae:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000eb0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000eb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8000eb8:	b9a2      	cbnz	r2, 8000ee4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8000eba:	68cb      	ldr	r3, [r1, #12]
 8000ebc:	6820      	ldr	r0, [r4, #0]
 8000ebe:	c906      	ldmia	r1, {r1, r2}
 8000ec0:	f7ff ffc2 	bl	8000e48 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8000ec4:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8000ec6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	f022 020c 	bic.w	r2, r2, #12
 8000ece:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000ed6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000ed8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000eda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000ede:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8000ee4:	2a04      	cmp	r2, #4
 8000ee6:	688e      	ldr	r6, [r1, #8]
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	c982      	ldmia	r1, {r1, r7}
 8000eec:	68e8      	ldr	r0, [r5, #12]
 8000eee:	d11f      	bne.n	8000f30 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ef0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8000ef2:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ef4:	f022 0210 	bic.w	r2, r2, #16
 8000ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000efa:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8000efc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8000efe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8000f02:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8000f06:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f08:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000f0c:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8000f0e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000f10:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f14:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000f18:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8000f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f1c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8000f1e:	699a      	ldr	r2, [r3, #24]
 8000f20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f24:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8000f2c:	619e      	str	r6, [r3, #24]
 8000f2e:	e7d2      	b.n	8000ed6 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8000f30:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f32:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8000f34:	d11c      	bne.n	8000f70 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000f3c:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8000f3e:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8000f40:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8000f44:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8000f46:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8000f48:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8000f4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8000f4e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8000f50:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8000f52:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000f56:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8000f5a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8000f5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000f5e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8000f60:	69da      	ldr	r2, [r3, #28]
 8000f62:	f022 020c 	bic.w	r2, r2, #12
 8000f66:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8000f6c:	61de      	str	r6, [r3, #28]
 8000f6e:	e7b2      	b.n	8000ed6 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000f76:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8000f78:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8000f7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8000f7e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8000f80:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8000f84:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8000f88:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8000f8a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8000f8c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8000f8e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8000f92:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8000f96:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8000f98:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000f9a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8000f9c:	69da      	ldr	r2, [r3, #28]
 8000f9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000fa2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8000fa4:	69da      	ldr	r2, [r3, #28]
 8000fa6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8000faa:	e7df      	b.n	8000f6c <HAL_TIM_IC_ConfigChannel+0xd0>

08000fac <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000fac:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000fae:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000fb0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000fb2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000fb4:	ea23 0304 	bic.w	r3, r3, r4
 8000fb8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000fba:	6a03      	ldr	r3, [r0, #32]
 8000fbc:	408a      	lsls	r2, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	6202      	str	r2, [r0, #32]
 8000fc2:	bd10      	pop	{r4, pc}

08000fc4 <HAL_TIM_IC_Start_IT>:
{
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	4604      	mov	r4, r0
  switch (Channel)
 8000fc8:	290c      	cmp	r1, #12
 8000fca:	d80d      	bhi.n	8000fe8 <HAL_TIM_IC_Start_IT+0x24>
 8000fcc:	e8df f001 	tbb	[pc, r1]
 8000fd0:	0c0c0c07 	.word	0x0c0c0c07
 8000fd4:	0c0c0c17 	.word	0x0c0c0c17
 8000fd8:	0c0c0c1c 	.word	0x0c0c0c1c
 8000fdc:	21          	.byte	0x21
 8000fdd:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000fde:	6802      	ldr	r2, [r0, #0]
 8000fe0:	68d3      	ldr	r3, [r2, #12]
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8000fe6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000fe8:	6820      	ldr	r0, [r4, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f7ff ffde 	bl	8000fac <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8000ff0:	6822      	ldr	r2, [r4, #0]
}
 8000ff2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8000ffe:	6802      	ldr	r2, [r0, #0]
 8001000:	68d3      	ldr	r3, [r2, #12]
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	e7ee      	b.n	8000fe6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001008:	6802      	ldr	r2, [r0, #0]
 800100a:	68d3      	ldr	r3, [r2, #12]
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	e7e9      	b.n	8000fe6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	68d3      	ldr	r3, [r2, #12]
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	e7e4      	b.n	8000fe6 <HAL_TIM_IC_Start_IT+0x22>

0800101c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800101c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001020:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001022:	2b01      	cmp	r3, #1
 8001024:	f04f 0302 	mov.w	r3, #2
 8001028:	d018      	beq.n	800105c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800102a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800102e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001030:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001032:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001034:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800103a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4322      	orrs	r2, r4
 8001040:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001048:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	430a      	orrs	r2, r1
 800104e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001050:	2301      	movs	r3, #1
 8001052:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001056:	2300      	movs	r3, #0
 8001058:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800105c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800105e:	bd10      	pop	{r4, pc}

08001060 <HAL_TIMEx_CommutationCallback>:
 8001060:	4770      	bx	lr

08001062 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001062:	4770      	bx	lr

08001064 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

	//if interrupt comes from TIM4 then do
	if(htim->Instance == TIM4)
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x88>)
{
 8001068:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == TIM4)
 800106a:	429a      	cmp	r2, r3
 800106c:	d13c      	bne.n	80010e8 <HAL_TIM_IC_CaptureCallback+0x84>
		// multiplying everything with 10 since we have pulses every 10us, i find no reason to update every 1us
		//there can be errors in values ie. higher or lower value hence we allow 50-+ value for pause
		//

		//ppm_sig read the full signal value (0.3ms+Xms)min 1ms, max 2ms
		uint32_t ppm_sig=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_1)*10);
 800106e:	2100      	movs	r1, #0
 8001070:	481f      	ldr	r0, [pc, #124]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001072:	f7ff fdb4 	bl	8000bde <HAL_TIM_ReadCapturedValue>
		//ppm_pause reads the pause value which should be 0.3ms
		uint32_t ppm_pause=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_2)*10);
 8001076:	2104      	movs	r1, #4
		uint32_t ppm_sig=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_1)*10);
 8001078:	4605      	mov	r5, r0
		uint32_t ppm_pause=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_2)*10);
 800107a:	481d      	ldr	r0, [pc, #116]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800107c:	f7ff fdaf 	bl	8000bde <HAL_TIM_ReadCapturedValue>
		  //printf("Read captured value ch1: %d\r\n",HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1)*10);
		  //printf("Read captured value ch2: %d\r\n",HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2)*10);
		 // __HAL_TIM_SetCounter(&htim2, 0);
		// on first start just reset counter
		//*****************************************************************************************
		if(!is_first_start)			//checks for first start, not really needed but useful to avoid going through loops/checks if not needed in start
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001082:	4c1d      	ldr	r4, [pc, #116]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	bb4a      	cbnz	r2, 80010dc <HAL_TIM_IC_CaptureCallback+0x78>
		uint32_t ppm_sig=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_1)*10);
 8001088:	220a      	movs	r2, #10
		{
			if(is_in_sync && edge)		//sync is checked with STOP pulse and edge is to make sure every second interrupt updates values and prints debug msg
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x98>)
		uint32_t ppm_sig=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_1)*10);
 800108c:	fb02 f105 	mul.w	r1, r2, r5
			if(is_in_sync && edge)		//sync is checked with STOP pulse and edge is to make sure every second interrupt updates values and prints debug msg
 8001090:	681d      	ldr	r5, [r3, #0]
 8001092:	b1ed      	cbz	r5, 80010d0 <HAL_TIM_IC_CaptureCallback+0x6c>
 8001094:	6826      	ldr	r6, [r4, #0]
 8001096:	f640 15c3 	movw	r5, #2499	; 0x9c3
 800109a:	b30e      	cbz	r6, 80010e0 <HAL_TIM_IC_CaptureCallback+0x7c>
			{
				//if(MAX_PULSE_WAIT_TIMEOUT_USEC <= usec && usec>350)
				//is max pulse timeout and ppm pause value is within acceptable parameters, it means we hit STOP
				//reset channel to 1
				if(MAX_PULSE_WAIT_TIMEOUT_USEC<=ppm_sig && (ppm_pause<350 || ppm_pause>250))
 800109c:	42a9      	cmp	r1, r5
 800109e:	d903      	bls.n	80010a8 <HAL_TIM_IC_CaptureCallback+0x44>
				{
					current_channel=1;
 80010a0:	2201      	movs	r2, #1
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x9c>)
				{
					is_in_sync=0;
				}
			}
		}else{
			is_first_start=0;
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00d      	b.n	80010c4 <HAL_TIM_IC_CaptureCallback+0x60>
		uint32_t ppm_pause=(HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_2)*10);
 80010a8:	4342      	muls	r2, r0
					if(ppm_sig>ppm_pause && ppm_sig<MAX_PULSE_WAIT_TIMEOUT_USEC)
 80010aa:	4291      	cmp	r1, r2
 80010ac:	d90a      	bls.n	80010c4 <HAL_TIM_IC_CaptureCallback+0x60>
						PPM_CHANNEL_TIME[current_channel]=ppm_sig;
 80010ae:	4d14      	ldr	r5, [pc, #80]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80010b2:	682a      	ldr	r2, [r5, #0]
						printf("PPM Ch time %d, current channel %d\n\n",PPM_CHANNEL_TIME[current_channel],current_channel);
 80010b4:	4814      	ldr	r0, [pc, #80]	; (8001108 <HAL_TIM_IC_CaptureCallback+0xa4>)
						PPM_CHANNEL_TIME[current_channel]=ppm_sig;
 80010b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						printf("PPM Ch time %d, current channel %d\n\n",PPM_CHANNEL_TIME[current_channel],current_channel);
 80010ba:	f000 fa09 	bl	80014d0 <iprintf>
						current_channel++;
 80010be:	682b      	ldr	r3, [r5, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	602b      	str	r3, [r5, #0]
		}
		//since interrupt is fired on every falling and rising edge, we don't need to update
		//values on both but only on one, hence we add variable edge that will simply
		//change value and update variables on every second interrupt
		if (edge==1){
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d10c      	bne.n	80010e4 <HAL_TIM_IC_CaptureCallback+0x80>
			edge=0;
 80010ca:	2300      	movs	r3, #0
		}else
		{
			edge=1;
 80010cc:	6023      	str	r3, [r4, #0]
		}
		//disabled since we don't use tim counter, but individual channel values
		//__HAL_TIM_SET_COUNTER(&htim4,0);

	}
}
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
				if(MAX_PULSE_WAIT_TIMEOUT_USEC<=ppm_sig && (MAX_PULSE_WAIT_TIMEOUT_USEC<(SIGNAL_LENGTH+250)))
 80010d0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80010d4:	4291      	cmp	r1, r2
 80010d6:	d9f5      	bls.n	80010c4 <HAL_TIM_IC_CaptureCallback+0x60>
					is_in_sync=1;
 80010d8:	2201      	movs	r2, #1
 80010da:	e7e3      	b.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x40>
			is_first_start=0;
 80010dc:	2200      	movs	r2, #0
 80010de:	e7e1      	b.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x40>
				if(MAX_PULSE_WAIT_TIMEOUT_USEC<=ppm_sig && (MAX_PULSE_WAIT_TIMEOUT_USEC<(SIGNAL_LENGTH+250)))
 80010e0:	42a9      	cmp	r1, r5
 80010e2:	d8f9      	bhi.n	80010d8 <HAL_TIM_IC_CaptureCallback+0x74>
			edge=1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e7f1      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0x68>
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
 80010ea:	bf00      	nop
 80010ec:	40000800 	.word	0x40000800
 80010f0:	200000bc 	.word	0x200000bc
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200000a8 	.word	0x200000a8
 8001100:	200000a4 	.word	0x200000a4
 8001104:	20000094 	.word	0x20000094
 8001108:	0800236c 	.word	0x0800236c

0800110c <_write>:
//int _write is used for debug by wire, needed for printing messages
int _write(int file, char *ptr, int len){
 800110c:	b510      	push	{r4, lr}
	int i;
	for(i = 0 ; i < len ; i++){
 800110e:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001110:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8001114:	4293      	cmp	r3, r2
 8001116:	db01      	blt.n	800111c <_write+0x10>
		ITM_SendChar((*ptr++));
	}
	return len;
}
 8001118:	4610      	mov	r0, r2
 800111a:	bd10      	pop	{r4, pc}
 800111c:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8001120:	07c0      	lsls	r0, r0, #31
 8001122:	d503      	bpl.n	800112c <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001124:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001128:	07c0      	lsls	r0, r0, #31
 800112a:	d402      	bmi.n	8001132 <_write+0x26>
	for(i = 0 ; i < len ; i++){
 800112c:	3301      	adds	r3, #1
 800112e:	e7f1      	b.n	8001114 <_write+0x8>
 8001130:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	2800      	cmp	r0, #0
 8001136:	d0fb      	beq.n	8001130 <_write+0x24>
		ITM_SendChar((*ptr++));
 8001138:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800113a:	7020      	strb	r0, [r4, #0]
 800113c:	e7f6      	b.n	800112c <_write+0x20>

0800113e <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8001142:	b510      	push	{r4, lr}
 8001144:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001146:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114a:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001150:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001156:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001158:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800115e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f7ff f99c 	bl	800049c <HAL_RCC_OscConfig>
 8001164:	b100      	cbz	r0, 8001168 <SystemClock_Config+0x2a>
 8001166:	e7fe      	b.n	8001166 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	4621      	mov	r1, r4
 8001176:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117c:	f7ff fb56 	bl	800082c <HAL_RCC_ClockConfig>
 8001180:	4604      	mov	r4, r0
 8001182:	b100      	cbz	r0, 8001186 <SystemClock_Config+0x48>
 8001184:	e7fe      	b.n	8001184 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001186:	f7ff fbf5 	bl	8000974 <HAL_RCC_GetHCLKFreq>
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001192:	f7ff f875 	bl	8000280 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001196:	2004      	movs	r0, #4
 8001198:	f7ff f888 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800119c:	4622      	mov	r2, r4
 800119e:	4621      	mov	r1, r4
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff f82c 	bl	8000200 <HAL_NVIC_SetPriority>
}
 80011a8:	b010      	add	sp, #64	; 0x40
 80011aa:	bd10      	pop	{r4, pc}

080011ac <main>:
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80011b0:	f7fe fff0 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80011b4:	f7ff ffc3 	bl	800113e <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <main+0x11c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011c0:	4842      	ldr	r0, [pc, #264]	; (80012cc <main+0x120>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	f042 0210 	orr.w	r2, r2, #16
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	f002 0210 	and.w	r2, r2, #16
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	f042 0220 	orr.w	r2, r2, #32
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	699a      	ldr	r2, [r3, #24]
  htim4.Instance = TIM4;
 80011e0:	4c3b      	ldr	r4, [pc, #236]	; (80012d0 <main+0x124>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	f002 0220 	and.w	r2, r2, #32
 80011e6:	9202      	str	r2, [sp, #8]
 80011e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	f042 0204 	orr.w	r2, r2, #4
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	f002 0204 	and.w	r2, r2, #4
 80011f8:	9203      	str	r2, [sp, #12]
 80011fa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	699a      	ldr	r2, [r3, #24]
 80011fe:	f042 0208 	orr.w	r2, r2, #8
 8001202:	619a      	str	r2, [r3, #24]
 8001204:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	9304      	str	r3, [sp, #16]
 800120e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001210:	f7ff f93e 	bl	8000490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	482c      	ldr	r0, [pc, #176]	; (80012cc <main+0x120>)
 800121a:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800121c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001222:	f7ff f855 	bl	80002d0 <HAL_GPIO_Init>
  htim4.Init.Prescaler = 719;
 8001226:	f240 2ccf 	movw	ip, #719	; 0x2cf
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <main+0x128>)
  htim4.Init.Period = 65535;
 800122c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim4.Init.Prescaler = 719;
 8001230:	e884 1008 	stmia.w	r4, {r3, ip}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001236:	4620      	mov	r0, r4
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	60a3      	str	r3, [r4, #8]
  htim4.Init.Period = 65535;
 800123a:	60e2      	str	r2, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001240:	f7ff fdce 	bl	8000de0 <HAL_TIM_Base_Init>
 8001244:	b100      	cbz	r0, 8001248 <main+0x9c>
 8001246:	e7fe      	b.n	8001246 <main+0x9a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	a914      	add	r1, sp, #80	; 0x50
 800124e:	f841 3d34 	str.w	r3, [r1, #-52]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fbea 	bl	8000a2c <HAL_TIM_ConfigClockSource>
 8001258:	b100      	cbz	r0, 800125c <main+0xb0>
 800125a:	e7fe      	b.n	800125a <main+0xae>
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800125c:	4620      	mov	r0, r4
 800125e:	f7ff fdd9 	bl	8000e14 <HAL_TIM_IC_Init>
 8001262:	b100      	cbz	r0, 8001266 <main+0xba>
 8001264:	e7fe      	b.n	8001264 <main+0xb8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001266:	2604      	movs	r6, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001268:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 800126a:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim4, &sSlaveConfig) != HAL_OK)
 800126c:	a90f      	add	r1, sp, #60	; 0x3c
 800126e:	4620      	mov	r0, r4
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001270:	960f      	str	r6, [sp, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001272:	9310      	str	r3, [sp, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001274:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_SlaveConfigSynchronization(&htim4, &sSlaveConfig) != HAL_OK)
 8001276:	f7ff fc92 	bl	8000b9e <HAL_TIM_SlaveConfigSynchronization>
 800127a:	b100      	cbz	r0, 800127e <main+0xd2>
 800127c:	e7fe      	b.n	800127c <main+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001282:	a905      	add	r1, sp, #20
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fec9 	bl	800101c <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4602      	mov	r2, r0
 800128c:	b100      	cbz	r0, 8001290 <main+0xe4>
 800128e:	e7fe      	b.n	800128e <main+0xe2>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001290:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8001292:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001294:	a90b      	add	r1, sp, #44	; 0x2c
 8001296:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001298:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800129a:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800129c:	f7ff fdfe 	bl	8000e9c <HAL_TIM_IC_ConfigChannel>
 80012a0:	b100      	cbz	r0, 80012a4 <main+0xf8>
 80012a2:	e7fe      	b.n	80012a2 <main+0xf6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a4:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012a6:	a90b      	add	r1, sp, #44	; 0x2c
 80012a8:	4632      	mov	r2, r6
 80012aa:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012ac:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012ae:	f7ff fdf5 	bl	8000e9c <HAL_TIM_IC_ConfigChannel>
 80012b2:	4601      	mov	r1, r0
 80012b4:	b100      	cbz	r0, 80012b8 <main+0x10c>
 80012b6:	e7fe      	b.n	80012b6 <main+0x10a>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//init channel 1 in TIM 4, enable interrupts
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff fe83 	bl	8000fc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);	//init channel 2 in TIM 4, enable interrupts
 80012be:	4631      	mov	r1, r6
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff fe7f 	bl	8000fc4 <HAL_TIM_IC_Start_IT>
 80012c6:	e7fe      	b.n	80012c6 <main+0x11a>
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40011000 	.word	0x40011000
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	40000800 	.word	0x40000800

080012d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_MspInit+0x84>)
{
 80012da:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012dc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012de:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e0:	f042 0201 	orr.w	r2, r2, #1
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	f7fe ff74 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f06f 000b 	mvn.w	r0, #11
 80012fa:	4611      	mov	r1, r2
 80012fc:	f7fe ff80 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	f06f 000a 	mvn.w	r0, #10
 8001306:	4611      	mov	r1, r2
 8001308:	f7fe ff7a 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	f06f 0009 	mvn.w	r0, #9
 8001312:	4611      	mov	r1, r2
 8001314:	f7fe ff74 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f06f 0004 	mvn.w	r0, #4
 800131e:	4611      	mov	r1, r2
 8001320:	f7fe ff6e 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f06f 0003 	mvn.w	r0, #3
 800132a:	4611      	mov	r1, r2
 800132c:	f7fe ff68 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	f06f 0001 	mvn.w	r0, #1
 8001336:	4611      	mov	r1, r2
 8001338:	f7fe ff62 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	f04f 30ff 	mov.w	r0, #4294967295
 8001342:	4611      	mov	r1, r2
 8001344:	f7fe ff5c 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001348:	4a05      	ldr	r2, [pc, #20]	; (8001360 <HAL_MspInit+0x88>)
 800134a:	6853      	ldr	r3, [r2, #4]
 800134c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	b003      	add	sp, #12
 8001358:	f85d fb04 	ldr.w	pc, [sp], #4
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001364:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM4)
 8001366:	6802      	ldr	r2, [r0, #0]
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_TIM_Base_MspInit+0x48>)
{
 800136a:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM4)
 800136c:	429a      	cmp	r2, r3
 800136e:	d11b      	bne.n	80013a8 <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001370:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001374:	69da      	ldr	r2, [r3, #28]
  
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2400      	movs	r4, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	61da      	str	r2, [r3, #28]
 800137e:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138a:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <HAL_TIM_Base_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f7fe ff9c 	bl	80002d0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001398:	201e      	movs	r0, #30
 800139a:	4622      	mov	r2, r4
 800139c:	4621      	mov	r1, r4
 800139e:	f7fe ff2f 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013a2:	201e      	movs	r0, #30
 80013a4:	f7fe ff60 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013a8:	b006      	add	sp, #24
 80013aa:	bd10      	pop	{r4, pc}
 80013ac:	40000800 	.word	0x40000800
 80013b0:	40010c00 	.word	0x40010c00

080013b4 <NMI_Handler>:
 80013b4:	4770      	bx	lr

080013b6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler>

080013b8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler>

080013ba <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler>

080013bc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler>

080013be <SVC_Handler>:
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80013c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f7fe fef7 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80013ce:	f7fe bf7a 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>
	...

080013d4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013d4:	4801      	ldr	r0, [pc, #4]	; (80013dc <TIM4_IRQHandler+0x8>)
 80013d6:	f7ff bc29 	b.w	8000c2c <HAL_TIM_IRQHandler>
 80013da:	bf00      	nop
 80013dc:	200000bc 	.word	0x200000bc

080013e0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <SystemInit+0x40>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f042 0201 	orr.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <SystemInit+0x44>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013fc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800140c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800140e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001412:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001414:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <SystemInit+0x48>)
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	f8ff0000 	.word	0xf8ff0000
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800142c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffc5 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f000 f80f 	bl	8001478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fea7 	bl	80011ac <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r3, =_sidata
 8001460:	08002444 	.word	0x08002444
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001468:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 800146c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001470:	20000100 	.word	0x20000100

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <__libc_init_array>:
 8001478:	b570      	push	{r4, r5, r6, lr}
 800147a:	2500      	movs	r5, #0
 800147c:	4e0c      	ldr	r6, [pc, #48]	; (80014b0 <__libc_init_array+0x38>)
 800147e:	4c0d      	ldr	r4, [pc, #52]	; (80014b4 <__libc_init_array+0x3c>)
 8001480:	1ba4      	subs	r4, r4, r6
 8001482:	10a4      	asrs	r4, r4, #2
 8001484:	42a5      	cmp	r5, r4
 8001486:	d109      	bne.n	800149c <__libc_init_array+0x24>
 8001488:	f000 ff5c 	bl	8002344 <_init>
 800148c:	2500      	movs	r5, #0
 800148e:	4e0a      	ldr	r6, [pc, #40]	; (80014b8 <__libc_init_array+0x40>)
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <__libc_init_array+0x44>)
 8001492:	1ba4      	subs	r4, r4, r6
 8001494:	10a4      	asrs	r4, r4, #2
 8001496:	42a5      	cmp	r5, r4
 8001498:	d105      	bne.n	80014a6 <__libc_init_array+0x2e>
 800149a:	bd70      	pop	{r4, r5, r6, pc}
 800149c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014a0:	4798      	blx	r3
 80014a2:	3501      	adds	r5, #1
 80014a4:	e7ee      	b.n	8001484 <__libc_init_array+0xc>
 80014a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014aa:	4798      	blx	r3
 80014ac:	3501      	adds	r5, #1
 80014ae:	e7f2      	b.n	8001496 <__libc_init_array+0x1e>
 80014b0:	0800243c 	.word	0x0800243c
 80014b4:	0800243c 	.word	0x0800243c
 80014b8:	0800243c 	.word	0x0800243c
 80014bc:	08002440 	.word	0x08002440

080014c0 <memset>:
 80014c0:	4603      	mov	r3, r0
 80014c2:	4402      	add	r2, r0
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d100      	bne.n	80014ca <memset+0xa>
 80014c8:	4770      	bx	lr
 80014ca:	f803 1b01 	strb.w	r1, [r3], #1
 80014ce:	e7f9      	b.n	80014c4 <memset+0x4>

080014d0 <iprintf>:
 80014d0:	b40f      	push	{r0, r1, r2, r3}
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <iprintf+0x2c>)
 80014d4:	b513      	push	{r0, r1, r4, lr}
 80014d6:	681c      	ldr	r4, [r3, #0]
 80014d8:	b124      	cbz	r4, 80014e4 <iprintf+0x14>
 80014da:	69a3      	ldr	r3, [r4, #24]
 80014dc:	b913      	cbnz	r3, 80014e4 <iprintf+0x14>
 80014de:	4620      	mov	r0, r4
 80014e0:	f000 f84e 	bl	8001580 <__sinit>
 80014e4:	ab05      	add	r3, sp, #20
 80014e6:	9a04      	ldr	r2, [sp, #16]
 80014e8:	68a1      	ldr	r1, [r4, #8]
 80014ea:	4620      	mov	r0, r4
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f000 f957 	bl	80017a0 <_vfiprintf_r>
 80014f2:	b002      	add	sp, #8
 80014f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014f8:	b004      	add	sp, #16
 80014fa:	4770      	bx	lr
 80014fc:	20000014 	.word	0x20000014

08001500 <_cleanup_r>:
 8001500:	4901      	ldr	r1, [pc, #4]	; (8001508 <_cleanup_r+0x8>)
 8001502:	f000 b8a9 	b.w	8001658 <_fwalk_reent>
 8001506:	bf00      	nop
 8001508:	08002079 	.word	0x08002079

0800150c <std.isra.0>:
 800150c:	2300      	movs	r3, #0
 800150e:	b510      	push	{r4, lr}
 8001510:	4604      	mov	r4, r0
 8001512:	6003      	str	r3, [r0, #0]
 8001514:	6043      	str	r3, [r0, #4]
 8001516:	6083      	str	r3, [r0, #8]
 8001518:	8181      	strh	r1, [r0, #12]
 800151a:	6643      	str	r3, [r0, #100]	; 0x64
 800151c:	81c2      	strh	r2, [r0, #14]
 800151e:	6103      	str	r3, [r0, #16]
 8001520:	6143      	str	r3, [r0, #20]
 8001522:	6183      	str	r3, [r0, #24]
 8001524:	4619      	mov	r1, r3
 8001526:	2208      	movs	r2, #8
 8001528:	305c      	adds	r0, #92	; 0x5c
 800152a:	f7ff ffc9 	bl	80014c0 <memset>
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <std.isra.0+0x38>)
 8001530:	6224      	str	r4, [r4, #32]
 8001532:	6263      	str	r3, [r4, #36]	; 0x24
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <std.isra.0+0x3c>)
 8001536:	62a3      	str	r3, [r4, #40]	; 0x28
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <std.isra.0+0x40>)
 800153a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <std.isra.0+0x44>)
 800153e:	6323      	str	r3, [r4, #48]	; 0x30
 8001540:	bd10      	pop	{r4, pc}
 8001542:	bf00      	nop
 8001544:	08001d1d 	.word	0x08001d1d
 8001548:	08001d3f 	.word	0x08001d3f
 800154c:	08001d77 	.word	0x08001d77
 8001550:	08001d9b 	.word	0x08001d9b

08001554 <__sfmoreglue>:
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	2568      	movs	r5, #104	; 0x68
 8001558:	1e4a      	subs	r2, r1, #1
 800155a:	4355      	muls	r5, r2
 800155c:	460e      	mov	r6, r1
 800155e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001562:	f000 f897 	bl	8001694 <_malloc_r>
 8001566:	4604      	mov	r4, r0
 8001568:	b140      	cbz	r0, 800157c <__sfmoreglue+0x28>
 800156a:	2100      	movs	r1, #0
 800156c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001570:	300c      	adds	r0, #12
 8001572:	60a0      	str	r0, [r4, #8]
 8001574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001578:	f7ff ffa2 	bl	80014c0 <memset>
 800157c:	4620      	mov	r0, r4
 800157e:	bd70      	pop	{r4, r5, r6, pc}

08001580 <__sinit>:
 8001580:	6983      	ldr	r3, [r0, #24]
 8001582:	b510      	push	{r4, lr}
 8001584:	4604      	mov	r4, r0
 8001586:	bb33      	cbnz	r3, 80015d6 <__sinit+0x56>
 8001588:	6483      	str	r3, [r0, #72]	; 0x48
 800158a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800158c:	6503      	str	r3, [r0, #80]	; 0x50
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <__sinit+0x58>)
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <__sinit+0x5c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6282      	str	r2, [r0, #40]	; 0x28
 8001596:	4298      	cmp	r0, r3
 8001598:	bf04      	itt	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	6183      	streq	r3, [r0, #24]
 800159e:	f000 f81f 	bl	80015e0 <__sfp>
 80015a2:	6060      	str	r0, [r4, #4]
 80015a4:	4620      	mov	r0, r4
 80015a6:	f000 f81b 	bl	80015e0 <__sfp>
 80015aa:	60a0      	str	r0, [r4, #8]
 80015ac:	4620      	mov	r0, r4
 80015ae:	f000 f817 	bl	80015e0 <__sfp>
 80015b2:	2200      	movs	r2, #0
 80015b4:	60e0      	str	r0, [r4, #12]
 80015b6:	2104      	movs	r1, #4
 80015b8:	6860      	ldr	r0, [r4, #4]
 80015ba:	f7ff ffa7 	bl	800150c <std.isra.0>
 80015be:	2201      	movs	r2, #1
 80015c0:	2109      	movs	r1, #9
 80015c2:	68a0      	ldr	r0, [r4, #8]
 80015c4:	f7ff ffa2 	bl	800150c <std.isra.0>
 80015c8:	2202      	movs	r2, #2
 80015ca:	2112      	movs	r1, #18
 80015cc:	68e0      	ldr	r0, [r4, #12]
 80015ce:	f7ff ff9d 	bl	800150c <std.isra.0>
 80015d2:	2301      	movs	r3, #1
 80015d4:	61a3      	str	r3, [r4, #24]
 80015d6:	bd10      	pop	{r4, pc}
 80015d8:	08002404 	.word	0x08002404
 80015dc:	08001501 	.word	0x08001501

080015e0 <__sfp>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <__sfp+0x74>)
 80015e4:	4607      	mov	r7, r0
 80015e6:	681e      	ldr	r6, [r3, #0]
 80015e8:	69b3      	ldr	r3, [r6, #24]
 80015ea:	b913      	cbnz	r3, 80015f2 <__sfp+0x12>
 80015ec:	4630      	mov	r0, r6
 80015ee:	f7ff ffc7 	bl	8001580 <__sinit>
 80015f2:	3648      	adds	r6, #72	; 0x48
 80015f4:	68b4      	ldr	r4, [r6, #8]
 80015f6:	6873      	ldr	r3, [r6, #4]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	d503      	bpl.n	8001604 <__sfp+0x24>
 80015fc:	6833      	ldr	r3, [r6, #0]
 80015fe:	b133      	cbz	r3, 800160e <__sfp+0x2e>
 8001600:	6836      	ldr	r6, [r6, #0]
 8001602:	e7f7      	b.n	80015f4 <__sfp+0x14>
 8001604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001608:	b16d      	cbz	r5, 8001626 <__sfp+0x46>
 800160a:	3468      	adds	r4, #104	; 0x68
 800160c:	e7f4      	b.n	80015f8 <__sfp+0x18>
 800160e:	2104      	movs	r1, #4
 8001610:	4638      	mov	r0, r7
 8001612:	f7ff ff9f 	bl	8001554 <__sfmoreglue>
 8001616:	6030      	str	r0, [r6, #0]
 8001618:	2800      	cmp	r0, #0
 800161a:	d1f1      	bne.n	8001600 <__sfp+0x20>
 800161c:	230c      	movs	r3, #12
 800161e:	4604      	mov	r4, r0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4620      	mov	r0, r4
 8001624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162a:	81e3      	strh	r3, [r4, #14]
 800162c:	2301      	movs	r3, #1
 800162e:	6665      	str	r5, [r4, #100]	; 0x64
 8001630:	81a3      	strh	r3, [r4, #12]
 8001632:	6025      	str	r5, [r4, #0]
 8001634:	60a5      	str	r5, [r4, #8]
 8001636:	6065      	str	r5, [r4, #4]
 8001638:	6125      	str	r5, [r4, #16]
 800163a:	6165      	str	r5, [r4, #20]
 800163c:	61a5      	str	r5, [r4, #24]
 800163e:	2208      	movs	r2, #8
 8001640:	4629      	mov	r1, r5
 8001642:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001646:	f7ff ff3b 	bl	80014c0 <memset>
 800164a:	6365      	str	r5, [r4, #52]	; 0x34
 800164c:	63a5      	str	r5, [r4, #56]	; 0x38
 800164e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001650:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001652:	e7e6      	b.n	8001622 <__sfp+0x42>
 8001654:	08002404 	.word	0x08002404

08001658 <_fwalk_reent>:
 8001658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800165c:	4680      	mov	r8, r0
 800165e:	4689      	mov	r9, r1
 8001660:	2600      	movs	r6, #0
 8001662:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001666:	b914      	cbnz	r4, 800166e <_fwalk_reent+0x16>
 8001668:	4630      	mov	r0, r6
 800166a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800166e:	68a5      	ldr	r5, [r4, #8]
 8001670:	6867      	ldr	r7, [r4, #4]
 8001672:	3f01      	subs	r7, #1
 8001674:	d501      	bpl.n	800167a <_fwalk_reent+0x22>
 8001676:	6824      	ldr	r4, [r4, #0]
 8001678:	e7f5      	b.n	8001666 <_fwalk_reent+0xe>
 800167a:	89ab      	ldrh	r3, [r5, #12]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d907      	bls.n	8001690 <_fwalk_reent+0x38>
 8001680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001684:	3301      	adds	r3, #1
 8001686:	d003      	beq.n	8001690 <_fwalk_reent+0x38>
 8001688:	4629      	mov	r1, r5
 800168a:	4640      	mov	r0, r8
 800168c:	47c8      	blx	r9
 800168e:	4306      	orrs	r6, r0
 8001690:	3568      	adds	r5, #104	; 0x68
 8001692:	e7ee      	b.n	8001672 <_fwalk_reent+0x1a>

08001694 <_malloc_r>:
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	1ccd      	adds	r5, r1, #3
 8001698:	f025 0503 	bic.w	r5, r5, #3
 800169c:	3508      	adds	r5, #8
 800169e:	2d0c      	cmp	r5, #12
 80016a0:	bf38      	it	cc
 80016a2:	250c      	movcc	r5, #12
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	4606      	mov	r6, r0
 80016a8:	db01      	blt.n	80016ae <_malloc_r+0x1a>
 80016aa:	42a9      	cmp	r1, r5
 80016ac:	d903      	bls.n	80016b6 <_malloc_r+0x22>
 80016ae:	230c      	movs	r3, #12
 80016b0:	6033      	str	r3, [r6, #0]
 80016b2:	2000      	movs	r0, #0
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
 80016b6:	f000 fd8d 	bl	80021d4 <__malloc_lock>
 80016ba:	4a23      	ldr	r2, [pc, #140]	; (8001748 <_malloc_r+0xb4>)
 80016bc:	6814      	ldr	r4, [r2, #0]
 80016be:	4621      	mov	r1, r4
 80016c0:	b991      	cbnz	r1, 80016e8 <_malloc_r+0x54>
 80016c2:	4c22      	ldr	r4, [pc, #136]	; (800174c <_malloc_r+0xb8>)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	b91b      	cbnz	r3, 80016d0 <_malloc_r+0x3c>
 80016c8:	4630      	mov	r0, r6
 80016ca:	f000 fb17 	bl	8001cfc <_sbrk_r>
 80016ce:	6020      	str	r0, [r4, #0]
 80016d0:	4629      	mov	r1, r5
 80016d2:	4630      	mov	r0, r6
 80016d4:	f000 fb12 	bl	8001cfc <_sbrk_r>
 80016d8:	1c43      	adds	r3, r0, #1
 80016da:	d126      	bne.n	800172a <_malloc_r+0x96>
 80016dc:	230c      	movs	r3, #12
 80016de:	4630      	mov	r0, r6
 80016e0:	6033      	str	r3, [r6, #0]
 80016e2:	f000 fd78 	bl	80021d6 <__malloc_unlock>
 80016e6:	e7e4      	b.n	80016b2 <_malloc_r+0x1e>
 80016e8:	680b      	ldr	r3, [r1, #0]
 80016ea:	1b5b      	subs	r3, r3, r5
 80016ec:	d41a      	bmi.n	8001724 <_malloc_r+0x90>
 80016ee:	2b0b      	cmp	r3, #11
 80016f0:	d90f      	bls.n	8001712 <_malloc_r+0x7e>
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	18cc      	adds	r4, r1, r3
 80016f6:	50cd      	str	r5, [r1, r3]
 80016f8:	4630      	mov	r0, r6
 80016fa:	f000 fd6c 	bl	80021d6 <__malloc_unlock>
 80016fe:	f104 000b 	add.w	r0, r4, #11
 8001702:	1d23      	adds	r3, r4, #4
 8001704:	f020 0007 	bic.w	r0, r0, #7
 8001708:	1ac3      	subs	r3, r0, r3
 800170a:	d01b      	beq.n	8001744 <_malloc_r+0xb0>
 800170c:	425a      	negs	r2, r3
 800170e:	50e2      	str	r2, [r4, r3]
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	428c      	cmp	r4, r1
 8001714:	bf0b      	itete	eq
 8001716:	6863      	ldreq	r3, [r4, #4]
 8001718:	684b      	ldrne	r3, [r1, #4]
 800171a:	6013      	streq	r3, [r2, #0]
 800171c:	6063      	strne	r3, [r4, #4]
 800171e:	bf18      	it	ne
 8001720:	460c      	movne	r4, r1
 8001722:	e7e9      	b.n	80016f8 <_malloc_r+0x64>
 8001724:	460c      	mov	r4, r1
 8001726:	6849      	ldr	r1, [r1, #4]
 8001728:	e7ca      	b.n	80016c0 <_malloc_r+0x2c>
 800172a:	1cc4      	adds	r4, r0, #3
 800172c:	f024 0403 	bic.w	r4, r4, #3
 8001730:	42a0      	cmp	r0, r4
 8001732:	d005      	beq.n	8001740 <_malloc_r+0xac>
 8001734:	1a21      	subs	r1, r4, r0
 8001736:	4630      	mov	r0, r6
 8001738:	f000 fae0 	bl	8001cfc <_sbrk_r>
 800173c:	3001      	adds	r0, #1
 800173e:	d0cd      	beq.n	80016dc <_malloc_r+0x48>
 8001740:	6025      	str	r5, [r4, #0]
 8001742:	e7d9      	b.n	80016f8 <_malloc_r+0x64>
 8001744:	bd70      	pop	{r4, r5, r6, pc}
 8001746:	bf00      	nop
 8001748:	200000ac 	.word	0x200000ac
 800174c:	200000b0 	.word	0x200000b0

08001750 <__sfputc_r>:
 8001750:	6893      	ldr	r3, [r2, #8]
 8001752:	b410      	push	{r4}
 8001754:	3b01      	subs	r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	6093      	str	r3, [r2, #8]
 800175a:	da08      	bge.n	800176e <__sfputc_r+0x1e>
 800175c:	6994      	ldr	r4, [r2, #24]
 800175e:	42a3      	cmp	r3, r4
 8001760:	db02      	blt.n	8001768 <__sfputc_r+0x18>
 8001762:	b2cb      	uxtb	r3, r1
 8001764:	2b0a      	cmp	r3, #10
 8001766:	d102      	bne.n	800176e <__sfputc_r+0x1e>
 8001768:	bc10      	pop	{r4}
 800176a:	f000 bb1b 	b.w	8001da4 <__swbuf_r>
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	1c58      	adds	r0, r3, #1
 8001772:	6010      	str	r0, [r2, #0]
 8001774:	7019      	strb	r1, [r3, #0]
 8001776:	b2c8      	uxtb	r0, r1
 8001778:	bc10      	pop	{r4}
 800177a:	4770      	bx	lr

0800177c <__sfputs_r>:
 800177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177e:	4606      	mov	r6, r0
 8001780:	460f      	mov	r7, r1
 8001782:	4614      	mov	r4, r2
 8001784:	18d5      	adds	r5, r2, r3
 8001786:	42ac      	cmp	r4, r5
 8001788:	d101      	bne.n	800178e <__sfputs_r+0x12>
 800178a:	2000      	movs	r0, #0
 800178c:	e007      	b.n	800179e <__sfputs_r+0x22>
 800178e:	463a      	mov	r2, r7
 8001790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff ffdb 	bl	8001750 <__sfputc_r>
 800179a:	1c43      	adds	r3, r0, #1
 800179c:	d1f3      	bne.n	8001786 <__sfputs_r+0xa>
 800179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017a0 <_vfiprintf_r>:
 80017a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a4:	b09d      	sub	sp, #116	; 0x74
 80017a6:	460c      	mov	r4, r1
 80017a8:	4617      	mov	r7, r2
 80017aa:	9303      	str	r3, [sp, #12]
 80017ac:	4606      	mov	r6, r0
 80017ae:	b118      	cbz	r0, 80017b8 <_vfiprintf_r+0x18>
 80017b0:	6983      	ldr	r3, [r0, #24]
 80017b2:	b90b      	cbnz	r3, 80017b8 <_vfiprintf_r+0x18>
 80017b4:	f7ff fee4 	bl	8001580 <__sinit>
 80017b8:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <_vfiprintf_r+0x20c>)
 80017ba:	429c      	cmp	r4, r3
 80017bc:	d157      	bne.n	800186e <_vfiprintf_r+0xce>
 80017be:	6874      	ldr	r4, [r6, #4]
 80017c0:	89a3      	ldrh	r3, [r4, #12]
 80017c2:	0718      	lsls	r0, r3, #28
 80017c4:	d55d      	bpl.n	8001882 <_vfiprintf_r+0xe2>
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d05a      	beq.n	8001882 <_vfiprintf_r+0xe2>
 80017cc:	2300      	movs	r3, #0
 80017ce:	9309      	str	r3, [sp, #36]	; 0x24
 80017d0:	2320      	movs	r3, #32
 80017d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017d6:	2330      	movs	r3, #48	; 0x30
 80017d8:	f04f 0b01 	mov.w	fp, #1
 80017dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017e0:	46b8      	mov	r8, r7
 80017e2:	4645      	mov	r5, r8
 80017e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d155      	bne.n	8001898 <_vfiprintf_r+0xf8>
 80017ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80017f0:	d00b      	beq.n	800180a <_vfiprintf_r+0x6a>
 80017f2:	4653      	mov	r3, sl
 80017f4:	463a      	mov	r2, r7
 80017f6:	4621      	mov	r1, r4
 80017f8:	4630      	mov	r0, r6
 80017fa:	f7ff ffbf 	bl	800177c <__sfputs_r>
 80017fe:	3001      	adds	r0, #1
 8001800:	f000 80c4 	beq.w	800198c <_vfiprintf_r+0x1ec>
 8001804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001806:	4453      	add	r3, sl
 8001808:	9309      	str	r3, [sp, #36]	; 0x24
 800180a:	f898 3000 	ldrb.w	r3, [r8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80bc 	beq.w	800198c <_vfiprintf_r+0x1ec>
 8001814:	2300      	movs	r3, #0
 8001816:	f04f 32ff 	mov.w	r2, #4294967295
 800181a:	9304      	str	r3, [sp, #16]
 800181c:	9307      	str	r3, [sp, #28]
 800181e:	9205      	str	r2, [sp, #20]
 8001820:	9306      	str	r3, [sp, #24]
 8001822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001826:	931a      	str	r3, [sp, #104]	; 0x68
 8001828:	2205      	movs	r2, #5
 800182a:	7829      	ldrb	r1, [r5, #0]
 800182c:	4860      	ldr	r0, [pc, #384]	; (80019b0 <_vfiprintf_r+0x210>)
 800182e:	f000 fcc3 	bl	80021b8 <memchr>
 8001832:	f105 0801 	add.w	r8, r5, #1
 8001836:	9b04      	ldr	r3, [sp, #16]
 8001838:	2800      	cmp	r0, #0
 800183a:	d131      	bne.n	80018a0 <_vfiprintf_r+0x100>
 800183c:	06d9      	lsls	r1, r3, #27
 800183e:	bf44      	itt	mi
 8001840:	2220      	movmi	r2, #32
 8001842:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001846:	071a      	lsls	r2, r3, #28
 8001848:	bf44      	itt	mi
 800184a:	222b      	movmi	r2, #43	; 0x2b
 800184c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001850:	782a      	ldrb	r2, [r5, #0]
 8001852:	2a2a      	cmp	r2, #42	; 0x2a
 8001854:	d02c      	beq.n	80018b0 <_vfiprintf_r+0x110>
 8001856:	2100      	movs	r1, #0
 8001858:	200a      	movs	r0, #10
 800185a:	9a07      	ldr	r2, [sp, #28]
 800185c:	46a8      	mov	r8, r5
 800185e:	f898 3000 	ldrb.w	r3, [r8]
 8001862:	3501      	adds	r5, #1
 8001864:	3b30      	subs	r3, #48	; 0x30
 8001866:	2b09      	cmp	r3, #9
 8001868:	d96d      	bls.n	8001946 <_vfiprintf_r+0x1a6>
 800186a:	b371      	cbz	r1, 80018ca <_vfiprintf_r+0x12a>
 800186c:	e026      	b.n	80018bc <_vfiprintf_r+0x11c>
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <_vfiprintf_r+0x214>)
 8001870:	429c      	cmp	r4, r3
 8001872:	d101      	bne.n	8001878 <_vfiprintf_r+0xd8>
 8001874:	68b4      	ldr	r4, [r6, #8]
 8001876:	e7a3      	b.n	80017c0 <_vfiprintf_r+0x20>
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <_vfiprintf_r+0x218>)
 800187a:	429c      	cmp	r4, r3
 800187c:	bf08      	it	eq
 800187e:	68f4      	ldreq	r4, [r6, #12]
 8001880:	e79e      	b.n	80017c0 <_vfiprintf_r+0x20>
 8001882:	4621      	mov	r1, r4
 8001884:	4630      	mov	r0, r6
 8001886:	f000 faf1 	bl	8001e6c <__swsetup_r>
 800188a:	2800      	cmp	r0, #0
 800188c:	d09e      	beq.n	80017cc <_vfiprintf_r+0x2c>
 800188e:	f04f 30ff 	mov.w	r0, #4294967295
 8001892:	b01d      	add	sp, #116	; 0x74
 8001894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001898:	2b25      	cmp	r3, #37	; 0x25
 800189a:	d0a7      	beq.n	80017ec <_vfiprintf_r+0x4c>
 800189c:	46a8      	mov	r8, r5
 800189e:	e7a0      	b.n	80017e2 <_vfiprintf_r+0x42>
 80018a0:	4a43      	ldr	r2, [pc, #268]	; (80019b0 <_vfiprintf_r+0x210>)
 80018a2:	4645      	mov	r5, r8
 80018a4:	1a80      	subs	r0, r0, r2
 80018a6:	fa0b f000 	lsl.w	r0, fp, r0
 80018aa:	4318      	orrs	r0, r3
 80018ac:	9004      	str	r0, [sp, #16]
 80018ae:	e7bb      	b.n	8001828 <_vfiprintf_r+0x88>
 80018b0:	9a03      	ldr	r2, [sp, #12]
 80018b2:	1d11      	adds	r1, r2, #4
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	9103      	str	r1, [sp, #12]
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	db01      	blt.n	80018c0 <_vfiprintf_r+0x120>
 80018bc:	9207      	str	r2, [sp, #28]
 80018be:	e004      	b.n	80018ca <_vfiprintf_r+0x12a>
 80018c0:	4252      	negs	r2, r2
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	9207      	str	r2, [sp, #28]
 80018c8:	9304      	str	r3, [sp, #16]
 80018ca:	f898 3000 	ldrb.w	r3, [r8]
 80018ce:	2b2e      	cmp	r3, #46	; 0x2e
 80018d0:	d110      	bne.n	80018f4 <_vfiprintf_r+0x154>
 80018d2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80018d6:	f108 0101 	add.w	r1, r8, #1
 80018da:	2b2a      	cmp	r3, #42	; 0x2a
 80018dc:	d137      	bne.n	800194e <_vfiprintf_r+0x1ae>
 80018de:	9b03      	ldr	r3, [sp, #12]
 80018e0:	f108 0802 	add.w	r8, r8, #2
 80018e4:	1d1a      	adds	r2, r3, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	9203      	str	r2, [sp, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bfb8      	it	lt
 80018ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80018f2:	9305      	str	r3, [sp, #20]
 80018f4:	4d31      	ldr	r5, [pc, #196]	; (80019bc <_vfiprintf_r+0x21c>)
 80018f6:	2203      	movs	r2, #3
 80018f8:	f898 1000 	ldrb.w	r1, [r8]
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 fc5b 	bl	80021b8 <memchr>
 8001902:	b140      	cbz	r0, 8001916 <_vfiprintf_r+0x176>
 8001904:	2340      	movs	r3, #64	; 0x40
 8001906:	1b40      	subs	r0, r0, r5
 8001908:	fa03 f000 	lsl.w	r0, r3, r0
 800190c:	9b04      	ldr	r3, [sp, #16]
 800190e:	f108 0801 	add.w	r8, r8, #1
 8001912:	4303      	orrs	r3, r0
 8001914:	9304      	str	r3, [sp, #16]
 8001916:	f898 1000 	ldrb.w	r1, [r8]
 800191a:	2206      	movs	r2, #6
 800191c:	4828      	ldr	r0, [pc, #160]	; (80019c0 <_vfiprintf_r+0x220>)
 800191e:	f108 0701 	add.w	r7, r8, #1
 8001922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001926:	f000 fc47 	bl	80021b8 <memchr>
 800192a:	2800      	cmp	r0, #0
 800192c:	d034      	beq.n	8001998 <_vfiprintf_r+0x1f8>
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <_vfiprintf_r+0x224>)
 8001930:	bb03      	cbnz	r3, 8001974 <_vfiprintf_r+0x1d4>
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	3307      	adds	r3, #7
 8001936:	f023 0307 	bic.w	r3, r3, #7
 800193a:	3308      	adds	r3, #8
 800193c:	9303      	str	r3, [sp, #12]
 800193e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001940:	444b      	add	r3, r9
 8001942:	9309      	str	r3, [sp, #36]	; 0x24
 8001944:	e74c      	b.n	80017e0 <_vfiprintf_r+0x40>
 8001946:	fb00 3202 	mla	r2, r0, r2, r3
 800194a:	2101      	movs	r1, #1
 800194c:	e786      	b.n	800185c <_vfiprintf_r+0xbc>
 800194e:	2300      	movs	r3, #0
 8001950:	250a      	movs	r5, #10
 8001952:	4618      	mov	r0, r3
 8001954:	9305      	str	r3, [sp, #20]
 8001956:	4688      	mov	r8, r1
 8001958:	f898 2000 	ldrb.w	r2, [r8]
 800195c:	3101      	adds	r1, #1
 800195e:	3a30      	subs	r2, #48	; 0x30
 8001960:	2a09      	cmp	r2, #9
 8001962:	d903      	bls.n	800196c <_vfiprintf_r+0x1cc>
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0c5      	beq.n	80018f4 <_vfiprintf_r+0x154>
 8001968:	9005      	str	r0, [sp, #20]
 800196a:	e7c3      	b.n	80018f4 <_vfiprintf_r+0x154>
 800196c:	fb05 2000 	mla	r0, r5, r0, r2
 8001970:	2301      	movs	r3, #1
 8001972:	e7f0      	b.n	8001956 <_vfiprintf_r+0x1b6>
 8001974:	ab03      	add	r3, sp, #12
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4622      	mov	r2, r4
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_vfiprintf_r+0x228>)
 800197c:	a904      	add	r1, sp, #16
 800197e:	4630      	mov	r0, r6
 8001980:	f3af 8000 	nop.w
 8001984:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001988:	4681      	mov	r9, r0
 800198a:	d1d8      	bne.n	800193e <_vfiprintf_r+0x19e>
 800198c:	89a3      	ldrh	r3, [r4, #12]
 800198e:	065b      	lsls	r3, r3, #25
 8001990:	f53f af7d 	bmi.w	800188e <_vfiprintf_r+0xee>
 8001994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001996:	e77c      	b.n	8001892 <_vfiprintf_r+0xf2>
 8001998:	ab03      	add	r3, sp, #12
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4622      	mov	r2, r4
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <_vfiprintf_r+0x228>)
 80019a0:	a904      	add	r1, sp, #16
 80019a2:	4630      	mov	r0, r6
 80019a4:	f000 f88a 	bl	8001abc <_printf_i>
 80019a8:	e7ec      	b.n	8001984 <_vfiprintf_r+0x1e4>
 80019aa:	bf00      	nop
 80019ac:	080023c4 	.word	0x080023c4
 80019b0:	08002408 	.word	0x08002408
 80019b4:	080023e4 	.word	0x080023e4
 80019b8:	080023a4 	.word	0x080023a4
 80019bc:	0800240e 	.word	0x0800240e
 80019c0:	08002412 	.word	0x08002412
 80019c4:	00000000 	.word	0x00000000
 80019c8:	0800177d 	.word	0x0800177d

080019cc <_printf_common>:
 80019cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d0:	4691      	mov	r9, r2
 80019d2:	461f      	mov	r7, r3
 80019d4:	688a      	ldr	r2, [r1, #8]
 80019d6:	690b      	ldr	r3, [r1, #16]
 80019d8:	4606      	mov	r6, r0
 80019da:	4293      	cmp	r3, r2
 80019dc:	bfb8      	it	lt
 80019de:	4613      	movlt	r3, r2
 80019e0:	f8c9 3000 	str.w	r3, [r9]
 80019e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019e8:	460c      	mov	r4, r1
 80019ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019ee:	b112      	cbz	r2, 80019f6 <_printf_common+0x2a>
 80019f0:	3301      	adds	r3, #1
 80019f2:	f8c9 3000 	str.w	r3, [r9]
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	0699      	lsls	r1, r3, #26
 80019fa:	bf42      	ittt	mi
 80019fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a00:	3302      	addmi	r3, #2
 8001a02:	f8c9 3000 	strmi.w	r3, [r9]
 8001a06:	6825      	ldr	r5, [r4, #0]
 8001a08:	f015 0506 	ands.w	r5, r5, #6
 8001a0c:	d107      	bne.n	8001a1e <_printf_common+0x52>
 8001a0e:	f104 0a19 	add.w	sl, r4, #25
 8001a12:	68e3      	ldr	r3, [r4, #12]
 8001a14:	f8d9 2000 	ldr.w	r2, [r9]
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	429d      	cmp	r5, r3
 8001a1c:	db2a      	blt.n	8001a74 <_printf_common+0xa8>
 8001a1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	3300      	adds	r3, #0
 8001a26:	bf18      	it	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	0692      	lsls	r2, r2, #26
 8001a2c:	d42f      	bmi.n	8001a8e <_printf_common+0xc2>
 8001a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a32:	4639      	mov	r1, r7
 8001a34:	4630      	mov	r0, r6
 8001a36:	47c0      	blx	r8
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d022      	beq.n	8001a82 <_printf_common+0xb6>
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	68e5      	ldr	r5, [r4, #12]
 8001a40:	f003 0306 	and.w	r3, r3, #6
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	bf18      	it	ne
 8001a48:	2500      	movne	r5, #0
 8001a4a:	f8d9 2000 	ldr.w	r2, [r9]
 8001a4e:	f04f 0900 	mov.w	r9, #0
 8001a52:	bf08      	it	eq
 8001a54:	1aad      	subeq	r5, r5, r2
 8001a56:	68a3      	ldr	r3, [r4, #8]
 8001a58:	6922      	ldr	r2, [r4, #16]
 8001a5a:	bf08      	it	eq
 8001a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bfc4      	itt	gt
 8001a64:	1a9b      	subgt	r3, r3, r2
 8001a66:	18ed      	addgt	r5, r5, r3
 8001a68:	341a      	adds	r4, #26
 8001a6a:	454d      	cmp	r5, r9
 8001a6c:	d11b      	bne.n	8001aa6 <_printf_common+0xda>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a74:	2301      	movs	r3, #1
 8001a76:	4652      	mov	r2, sl
 8001a78:	4639      	mov	r1, r7
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	47c0      	blx	r8
 8001a7e:	3001      	adds	r0, #1
 8001a80:	d103      	bne.n	8001a8a <_printf_common+0xbe>
 8001a82:	f04f 30ff 	mov.w	r0, #4294967295
 8001a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a8a:	3501      	adds	r5, #1
 8001a8c:	e7c1      	b.n	8001a12 <_printf_common+0x46>
 8001a8e:	2030      	movs	r0, #48	; 0x30
 8001a90:	18e1      	adds	r1, r4, r3
 8001a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a9c:	4422      	add	r2, r4
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aa4:	e7c3      	b.n	8001a2e <_printf_common+0x62>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	4639      	mov	r1, r7
 8001aac:	4630      	mov	r0, r6
 8001aae:	47c0      	blx	r8
 8001ab0:	3001      	adds	r0, #1
 8001ab2:	d0e6      	beq.n	8001a82 <_printf_common+0xb6>
 8001ab4:	f109 0901 	add.w	r9, r9, #1
 8001ab8:	e7d7      	b.n	8001a6a <_printf_common+0x9e>
	...

08001abc <_printf_i>:
 8001abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ac0:	4617      	mov	r7, r2
 8001ac2:	7e0a      	ldrb	r2, [r1, #24]
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	2a6e      	cmp	r2, #110	; 0x6e
 8001ac8:	4698      	mov	r8, r3
 8001aca:	4606      	mov	r6, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ad0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001ad4:	f000 80bc 	beq.w	8001c50 <_printf_i+0x194>
 8001ad8:	d81a      	bhi.n	8001b10 <_printf_i+0x54>
 8001ada:	2a63      	cmp	r2, #99	; 0x63
 8001adc:	d02e      	beq.n	8001b3c <_printf_i+0x80>
 8001ade:	d80a      	bhi.n	8001af6 <_printf_i+0x3a>
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	f000 80c8 	beq.w	8001c76 <_printf_i+0x1ba>
 8001ae6:	2a58      	cmp	r2, #88	; 0x58
 8001ae8:	f000 808a 	beq.w	8001c00 <_printf_i+0x144>
 8001aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001af0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001af4:	e02a      	b.n	8001b4c <_printf_i+0x90>
 8001af6:	2a64      	cmp	r2, #100	; 0x64
 8001af8:	d001      	beq.n	8001afe <_printf_i+0x42>
 8001afa:	2a69      	cmp	r2, #105	; 0x69
 8001afc:	d1f6      	bne.n	8001aec <_printf_i+0x30>
 8001afe:	6821      	ldr	r1, [r4, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b06:	d023      	beq.n	8001b50 <_printf_i+0x94>
 8001b08:	1d11      	adds	r1, r2, #4
 8001b0a:	6019      	str	r1, [r3, #0]
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	e027      	b.n	8001b60 <_printf_i+0xa4>
 8001b10:	2a73      	cmp	r2, #115	; 0x73
 8001b12:	f000 80b4 	beq.w	8001c7e <_printf_i+0x1c2>
 8001b16:	d808      	bhi.n	8001b2a <_printf_i+0x6e>
 8001b18:	2a6f      	cmp	r2, #111	; 0x6f
 8001b1a:	d02a      	beq.n	8001b72 <_printf_i+0xb6>
 8001b1c:	2a70      	cmp	r2, #112	; 0x70
 8001b1e:	d1e5      	bne.n	8001aec <_printf_i+0x30>
 8001b20:	680a      	ldr	r2, [r1, #0]
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	600a      	str	r2, [r1, #0]
 8001b28:	e003      	b.n	8001b32 <_printf_i+0x76>
 8001b2a:	2a75      	cmp	r2, #117	; 0x75
 8001b2c:	d021      	beq.n	8001b72 <_printf_i+0xb6>
 8001b2e:	2a78      	cmp	r2, #120	; 0x78
 8001b30:	d1dc      	bne.n	8001aec <_printf_i+0x30>
 8001b32:	2278      	movs	r2, #120	; 0x78
 8001b34:	496f      	ldr	r1, [pc, #444]	; (8001cf4 <_printf_i+0x238>)
 8001b36:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001b3a:	e064      	b.n	8001c06 <_printf_i+0x14a>
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001b42:	1d11      	adds	r1, r2, #4
 8001b44:	6019      	str	r1, [r3, #0]
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0a3      	b.n	8001c98 <_printf_i+0x1dc>
 8001b50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b54:	f102 0104 	add.w	r1, r2, #4
 8001b58:	6019      	str	r1, [r3, #0]
 8001b5a:	d0d7      	beq.n	8001b0c <_printf_i+0x50>
 8001b5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da03      	bge.n	8001b6c <_printf_i+0xb0>
 8001b64:	222d      	movs	r2, #45	; 0x2d
 8001b66:	425b      	negs	r3, r3
 8001b68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b6c:	4962      	ldr	r1, [pc, #392]	; (8001cf8 <_printf_i+0x23c>)
 8001b6e:	220a      	movs	r2, #10
 8001b70:	e017      	b.n	8001ba2 <_printf_i+0xe6>
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b7a:	d003      	beq.n	8001b84 <_printf_i+0xc8>
 8001b7c:	1d08      	adds	r0, r1, #4
 8001b7e:	6018      	str	r0, [r3, #0]
 8001b80:	680b      	ldr	r3, [r1, #0]
 8001b82:	e006      	b.n	8001b92 <_printf_i+0xd6>
 8001b84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b88:	f101 0004 	add.w	r0, r1, #4
 8001b8c:	6018      	str	r0, [r3, #0]
 8001b8e:	d0f7      	beq.n	8001b80 <_printf_i+0xc4>
 8001b90:	880b      	ldrh	r3, [r1, #0]
 8001b92:	2a6f      	cmp	r2, #111	; 0x6f
 8001b94:	bf14      	ite	ne
 8001b96:	220a      	movne	r2, #10
 8001b98:	2208      	moveq	r2, #8
 8001b9a:	4957      	ldr	r1, [pc, #348]	; (8001cf8 <_printf_i+0x23c>)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001ba2:	6865      	ldr	r5, [r4, #4]
 8001ba4:	2d00      	cmp	r5, #0
 8001ba6:	60a5      	str	r5, [r4, #8]
 8001ba8:	f2c0 809c 	blt.w	8001ce4 <_printf_i+0x228>
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	f020 0004 	bic.w	r0, r0, #4
 8001bb2:	6020      	str	r0, [r4, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d13f      	bne.n	8001c38 <_printf_i+0x17c>
 8001bb8:	2d00      	cmp	r5, #0
 8001bba:	f040 8095 	bne.w	8001ce8 <_printf_i+0x22c>
 8001bbe:	4675      	mov	r5, lr
 8001bc0:	2a08      	cmp	r2, #8
 8001bc2:	d10b      	bne.n	8001bdc <_printf_i+0x120>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	07da      	lsls	r2, r3, #31
 8001bc8:	d508      	bpl.n	8001bdc <_printf_i+0x120>
 8001bca:	6923      	ldr	r3, [r4, #16]
 8001bcc:	6862      	ldr	r2, [r4, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	bfde      	ittt	le
 8001bd2:	2330      	movle	r3, #48	; 0x30
 8001bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001bdc:	ebae 0305 	sub.w	r3, lr, r5
 8001be0:	6123      	str	r3, [r4, #16]
 8001be2:	f8cd 8000 	str.w	r8, [sp]
 8001be6:	463b      	mov	r3, r7
 8001be8:	aa03      	add	r2, sp, #12
 8001bea:	4621      	mov	r1, r4
 8001bec:	4630      	mov	r0, r6
 8001bee:	f7ff feed 	bl	80019cc <_printf_common>
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d155      	bne.n	8001ca2 <_printf_i+0x1e6>
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	b005      	add	sp, #20
 8001bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001c04:	493c      	ldr	r1, [pc, #240]	; (8001cf8 <_printf_i+0x23c>)
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c0e:	f100 0504 	add.w	r5, r0, #4
 8001c12:	601d      	str	r5, [r3, #0]
 8001c14:	d001      	beq.n	8001c1a <_printf_i+0x15e>
 8001c16:	6803      	ldr	r3, [r0, #0]
 8001c18:	e002      	b.n	8001c20 <_printf_i+0x164>
 8001c1a:	0655      	lsls	r5, r2, #25
 8001c1c:	d5fb      	bpl.n	8001c16 <_printf_i+0x15a>
 8001c1e:	8803      	ldrh	r3, [r0, #0]
 8001c20:	07d0      	lsls	r0, r2, #31
 8001c22:	bf44      	itt	mi
 8001c24:	f042 0220 	orrmi.w	r2, r2, #32
 8001c28:	6022      	strmi	r2, [r4, #0]
 8001c2a:	b91b      	cbnz	r3, 8001c34 <_printf_i+0x178>
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	f022 0220 	bic.w	r2, r2, #32
 8001c32:	6022      	str	r2, [r4, #0]
 8001c34:	2210      	movs	r2, #16
 8001c36:	e7b1      	b.n	8001b9c <_printf_i+0xe0>
 8001c38:	4675      	mov	r5, lr
 8001c3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001c3e:	fb02 3310 	mls	r3, r2, r0, r3
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d1f5      	bne.n	8001c3a <_printf_i+0x17e>
 8001c4e:	e7b7      	b.n	8001bc0 <_printf_i+0x104>
 8001c50:	6808      	ldr	r0, [r1, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c58:	6949      	ldr	r1, [r1, #20]
 8001c5a:	d004      	beq.n	8001c66 <_printf_i+0x1aa>
 8001c5c:	1d10      	adds	r0, r2, #4
 8001c5e:	6018      	str	r0, [r3, #0]
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	6019      	str	r1, [r3, #0]
 8001c64:	e007      	b.n	8001c76 <_printf_i+0x1ba>
 8001c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c6a:	f102 0004 	add.w	r0, r2, #4
 8001c6e:	6018      	str	r0, [r3, #0]
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	d0f6      	beq.n	8001c62 <_printf_i+0x1a6>
 8001c74:	8019      	strh	r1, [r3, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	4675      	mov	r5, lr
 8001c7a:	6123      	str	r3, [r4, #16]
 8001c7c:	e7b1      	b.n	8001be2 <_printf_i+0x126>
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	1d11      	adds	r1, r2, #4
 8001c82:	6019      	str	r1, [r3, #0]
 8001c84:	6815      	ldr	r5, [r2, #0]
 8001c86:	2100      	movs	r1, #0
 8001c88:	6862      	ldr	r2, [r4, #4]
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f000 fa94 	bl	80021b8 <memchr>
 8001c90:	b108      	cbz	r0, 8001c96 <_printf_i+0x1da>
 8001c92:	1b40      	subs	r0, r0, r5
 8001c94:	6060      	str	r0, [r4, #4]
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	6123      	str	r3, [r4, #16]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ca0:	e79f      	b.n	8001be2 <_printf_i+0x126>
 8001ca2:	6923      	ldr	r3, [r4, #16]
 8001ca4:	462a      	mov	r2, r5
 8001ca6:	4639      	mov	r1, r7
 8001ca8:	4630      	mov	r0, r6
 8001caa:	47c0      	blx	r8
 8001cac:	3001      	adds	r0, #1
 8001cae:	d0a2      	beq.n	8001bf6 <_printf_i+0x13a>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	079b      	lsls	r3, r3, #30
 8001cb4:	d507      	bpl.n	8001cc6 <_printf_i+0x20a>
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	f104 0919 	add.w	r9, r4, #25
 8001cbc:	68e3      	ldr	r3, [r4, #12]
 8001cbe:	9a03      	ldr	r2, [sp, #12]
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	429d      	cmp	r5, r3
 8001cc4:	db05      	blt.n	8001cd2 <_printf_i+0x216>
 8001cc6:	68e0      	ldr	r0, [r4, #12]
 8001cc8:	9b03      	ldr	r3, [sp, #12]
 8001cca:	4298      	cmp	r0, r3
 8001ccc:	bfb8      	it	lt
 8001cce:	4618      	movlt	r0, r3
 8001cd0:	e793      	b.n	8001bfa <_printf_i+0x13e>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	464a      	mov	r2, r9
 8001cd6:	4639      	mov	r1, r7
 8001cd8:	4630      	mov	r0, r6
 8001cda:	47c0      	blx	r8
 8001cdc:	3001      	adds	r0, #1
 8001cde:	d08a      	beq.n	8001bf6 <_printf_i+0x13a>
 8001ce0:	3501      	adds	r5, #1
 8001ce2:	e7eb      	b.n	8001cbc <_printf_i+0x200>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1a7      	bne.n	8001c38 <_printf_i+0x17c>
 8001ce8:	780b      	ldrb	r3, [r1, #0]
 8001cea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cf2:	e765      	b.n	8001bc0 <_printf_i+0x104>
 8001cf4:	0800242a 	.word	0x0800242a
 8001cf8:	08002419 	.word	0x08002419

08001cfc <_sbrk_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	2300      	movs	r3, #0
 8001d00:	4c05      	ldr	r4, [pc, #20]	; (8001d18 <_sbrk_r+0x1c>)
 8001d02:	4605      	mov	r5, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	6023      	str	r3, [r4, #0]
 8001d08:	f000 fb0e 	bl	8002328 <_sbrk>
 8001d0c:	1c43      	adds	r3, r0, #1
 8001d0e:	d102      	bne.n	8001d16 <_sbrk_r+0x1a>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	b103      	cbz	r3, 8001d16 <_sbrk_r+0x1a>
 8001d14:	602b      	str	r3, [r5, #0]
 8001d16:	bd38      	pop	{r3, r4, r5, pc}
 8001d18:	200000fc 	.word	0x200000fc

08001d1c <__sread>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	460c      	mov	r4, r1
 8001d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d24:	f000 faa4 	bl	8002270 <_read_r>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	bfab      	itete	ge
 8001d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8001d30:	181b      	addge	r3, r3, r0
 8001d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d36:	bfac      	ite	ge
 8001d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d3a:	81a3      	strhlt	r3, [r4, #12]
 8001d3c:	bd10      	pop	{r4, pc}

08001d3e <__swrite>:
 8001d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d42:	461f      	mov	r7, r3
 8001d44:	898b      	ldrh	r3, [r1, #12]
 8001d46:	4605      	mov	r5, r0
 8001d48:	05db      	lsls	r3, r3, #23
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	4616      	mov	r6, r2
 8001d4e:	d505      	bpl.n	8001d5c <__swrite+0x1e>
 8001d50:	2302      	movs	r3, #2
 8001d52:	2200      	movs	r2, #0
 8001d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d58:	f000 f9b8 	bl	80020cc <_lseek_r>
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	4632      	mov	r2, r6
 8001d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d64:	81a3      	strh	r3, [r4, #12]
 8001d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d72:	f000 b869 	b.w	8001e48 <_write_r>

08001d76 <__sseek>:
 8001d76:	b510      	push	{r4, lr}
 8001d78:	460c      	mov	r4, r1
 8001d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7e:	f000 f9a5 	bl	80020cc <_lseek_r>
 8001d82:	1c43      	adds	r3, r0, #1
 8001d84:	89a3      	ldrh	r3, [r4, #12]
 8001d86:	bf15      	itete	ne
 8001d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d92:	81a3      	strheq	r3, [r4, #12]
 8001d94:	bf18      	it	ne
 8001d96:	81a3      	strhne	r3, [r4, #12]
 8001d98:	bd10      	pop	{r4, pc}

08001d9a <__sclose>:
 8001d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d9e:	f000 b8d3 	b.w	8001f48 <_close_r>
	...

08001da4 <__swbuf_r>:
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	460e      	mov	r6, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	4605      	mov	r5, r0
 8001dac:	b118      	cbz	r0, 8001db6 <__swbuf_r+0x12>
 8001dae:	6983      	ldr	r3, [r0, #24]
 8001db0:	b90b      	cbnz	r3, 8001db6 <__swbuf_r+0x12>
 8001db2:	f7ff fbe5 	bl	8001580 <__sinit>
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <__swbuf_r+0x98>)
 8001db8:	429c      	cmp	r4, r3
 8001dba:	d12a      	bne.n	8001e12 <__swbuf_r+0x6e>
 8001dbc:	686c      	ldr	r4, [r5, #4]
 8001dbe:	69a3      	ldr	r3, [r4, #24]
 8001dc0:	60a3      	str	r3, [r4, #8]
 8001dc2:	89a3      	ldrh	r3, [r4, #12]
 8001dc4:	071a      	lsls	r2, r3, #28
 8001dc6:	d52e      	bpl.n	8001e26 <__swbuf_r+0x82>
 8001dc8:	6923      	ldr	r3, [r4, #16]
 8001dca:	b363      	cbz	r3, 8001e26 <__swbuf_r+0x82>
 8001dcc:	6923      	ldr	r3, [r4, #16]
 8001dce:	6820      	ldr	r0, [r4, #0]
 8001dd0:	b2f6      	uxtb	r6, r6
 8001dd2:	1ac0      	subs	r0, r0, r3
 8001dd4:	6963      	ldr	r3, [r4, #20]
 8001dd6:	4637      	mov	r7, r6
 8001dd8:	4298      	cmp	r0, r3
 8001dda:	db04      	blt.n	8001de6 <__swbuf_r+0x42>
 8001ddc:	4621      	mov	r1, r4
 8001dde:	4628      	mov	r0, r5
 8001de0:	f000 f94a 	bl	8002078 <_fflush_r>
 8001de4:	bb28      	cbnz	r0, 8001e32 <__swbuf_r+0x8e>
 8001de6:	68a3      	ldr	r3, [r4, #8]
 8001de8:	3001      	adds	r0, #1
 8001dea:	3b01      	subs	r3, #1
 8001dec:	60a3      	str	r3, [r4, #8]
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	6022      	str	r2, [r4, #0]
 8001df4:	701e      	strb	r6, [r3, #0]
 8001df6:	6963      	ldr	r3, [r4, #20]
 8001df8:	4298      	cmp	r0, r3
 8001dfa:	d004      	beq.n	8001e06 <__swbuf_r+0x62>
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	07db      	lsls	r3, r3, #31
 8001e00:	d519      	bpl.n	8001e36 <__swbuf_r+0x92>
 8001e02:	2e0a      	cmp	r6, #10
 8001e04:	d117      	bne.n	8001e36 <__swbuf_r+0x92>
 8001e06:	4621      	mov	r1, r4
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f000 f935 	bl	8002078 <_fflush_r>
 8001e0e:	b190      	cbz	r0, 8001e36 <__swbuf_r+0x92>
 8001e10:	e00f      	b.n	8001e32 <__swbuf_r+0x8e>
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <__swbuf_r+0x9c>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	d101      	bne.n	8001e1c <__swbuf_r+0x78>
 8001e18:	68ac      	ldr	r4, [r5, #8]
 8001e1a:	e7d0      	b.n	8001dbe <__swbuf_r+0x1a>
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <__swbuf_r+0xa0>)
 8001e1e:	429c      	cmp	r4, r3
 8001e20:	bf08      	it	eq
 8001e22:	68ec      	ldreq	r4, [r5, #12]
 8001e24:	e7cb      	b.n	8001dbe <__swbuf_r+0x1a>
 8001e26:	4621      	mov	r1, r4
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f000 f81f 	bl	8001e6c <__swsetup_r>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d0cc      	beq.n	8001dcc <__swbuf_r+0x28>
 8001e32:	f04f 37ff 	mov.w	r7, #4294967295
 8001e36:	4638      	mov	r0, r7
 8001e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	080023c4 	.word	0x080023c4
 8001e40:	080023e4 	.word	0x080023e4
 8001e44:	080023a4 	.word	0x080023a4

08001e48 <_write_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4605      	mov	r5, r0
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	2200      	movs	r2, #0
 8001e52:	4c05      	ldr	r4, [pc, #20]	; (8001e68 <_write_r+0x20>)
 8001e54:	6022      	str	r2, [r4, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f7ff f958 	bl	800110c <_write>
 8001e5c:	1c43      	adds	r3, r0, #1
 8001e5e:	d102      	bne.n	8001e66 <_write_r+0x1e>
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	b103      	cbz	r3, 8001e66 <_write_r+0x1e>
 8001e64:	602b      	str	r3, [r5, #0]
 8001e66:	bd38      	pop	{r3, r4, r5, pc}
 8001e68:	200000fc 	.word	0x200000fc

08001e6c <__swsetup_r>:
 8001e6c:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <__swsetup_r+0xcc>)
 8001e6e:	b570      	push	{r4, r5, r6, lr}
 8001e70:	681d      	ldr	r5, [r3, #0]
 8001e72:	4606      	mov	r6, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	b125      	cbz	r5, 8001e82 <__swsetup_r+0x16>
 8001e78:	69ab      	ldr	r3, [r5, #24]
 8001e7a:	b913      	cbnz	r3, 8001e82 <__swsetup_r+0x16>
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7ff fb7f 	bl	8001580 <__sinit>
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <__swsetup_r+0xd0>)
 8001e84:	429c      	cmp	r4, r3
 8001e86:	d10f      	bne.n	8001ea8 <__swsetup_r+0x3c>
 8001e88:	686c      	ldr	r4, [r5, #4]
 8001e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	0715      	lsls	r5, r2, #28
 8001e92:	d42c      	bmi.n	8001eee <__swsetup_r+0x82>
 8001e94:	06d0      	lsls	r0, r2, #27
 8001e96:	d411      	bmi.n	8001ebc <__swsetup_r+0x50>
 8001e98:	2209      	movs	r2, #9
 8001e9a:	6032      	str	r2, [r6, #0]
 8001e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea0:	81a3      	strh	r3, [r4, #12]
 8001ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <__swsetup_r+0xd4>)
 8001eaa:	429c      	cmp	r4, r3
 8001eac:	d101      	bne.n	8001eb2 <__swsetup_r+0x46>
 8001eae:	68ac      	ldr	r4, [r5, #8]
 8001eb0:	e7eb      	b.n	8001e8a <__swsetup_r+0x1e>
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <__swsetup_r+0xd8>)
 8001eb4:	429c      	cmp	r4, r3
 8001eb6:	bf08      	it	eq
 8001eb8:	68ec      	ldreq	r4, [r5, #12]
 8001eba:	e7e6      	b.n	8001e8a <__swsetup_r+0x1e>
 8001ebc:	0751      	lsls	r1, r2, #29
 8001ebe:	d512      	bpl.n	8001ee6 <__swsetup_r+0x7a>
 8001ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ec2:	b141      	cbz	r1, 8001ed6 <__swsetup_r+0x6a>
 8001ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ec8:	4299      	cmp	r1, r3
 8001eca:	d002      	beq.n	8001ed2 <__swsetup_r+0x66>
 8001ecc:	4630      	mov	r0, r6
 8001ece:	f000 f983 	bl	80021d8 <_free_r>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	6063      	str	r3, [r4, #4]
 8001ee2:	6923      	ldr	r3, [r4, #16]
 8001ee4:	6023      	str	r3, [r4, #0]
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	81a3      	strh	r3, [r4, #12]
 8001eee:	6923      	ldr	r3, [r4, #16]
 8001ef0:	b94b      	cbnz	r3, 8001f06 <__swsetup_r+0x9a>
 8001ef2:	89a3      	ldrh	r3, [r4, #12]
 8001ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d003      	beq.n	8001f06 <__swsetup_r+0x9a>
 8001efe:	4621      	mov	r1, r4
 8001f00:	4630      	mov	r0, r6
 8001f02:	f000 f919 	bl	8002138 <__smakebuf_r>
 8001f06:	89a2      	ldrh	r2, [r4, #12]
 8001f08:	f012 0301 	ands.w	r3, r2, #1
 8001f0c:	d00c      	beq.n	8001f28 <__swsetup_r+0xbc>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60a3      	str	r3, [r4, #8]
 8001f12:	6963      	ldr	r3, [r4, #20]
 8001f14:	425b      	negs	r3, r3
 8001f16:	61a3      	str	r3, [r4, #24]
 8001f18:	6923      	ldr	r3, [r4, #16]
 8001f1a:	b953      	cbnz	r3, 8001f32 <__swsetup_r+0xc6>
 8001f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001f24:	d1ba      	bne.n	8001e9c <__swsetup_r+0x30>
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	0792      	lsls	r2, r2, #30
 8001f2a:	bf58      	it	pl
 8001f2c:	6963      	ldrpl	r3, [r4, #20]
 8001f2e:	60a3      	str	r3, [r4, #8]
 8001f30:	e7f2      	b.n	8001f18 <__swsetup_r+0xac>
 8001f32:	2000      	movs	r0, #0
 8001f34:	e7f7      	b.n	8001f26 <__swsetup_r+0xba>
 8001f36:	bf00      	nop
 8001f38:	20000014 	.word	0x20000014
 8001f3c:	080023c4 	.word	0x080023c4
 8001f40:	080023e4 	.word	0x080023e4
 8001f44:	080023a4 	.word	0x080023a4

08001f48 <_close_r>:
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4c05      	ldr	r4, [pc, #20]	; (8001f64 <_close_r+0x1c>)
 8001f4e:	4605      	mov	r5, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	f000 f9c0 	bl	80022d8 <_close>
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	d102      	bne.n	8001f62 <_close_r+0x1a>
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	b103      	cbz	r3, 8001f62 <_close_r+0x1a>
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	200000fc 	.word	0x200000fc

08001f68 <__sflush_r>:
 8001f68:	898a      	ldrh	r2, [r1, #12]
 8001f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f6e:	4605      	mov	r5, r0
 8001f70:	0710      	lsls	r0, r2, #28
 8001f72:	460c      	mov	r4, r1
 8001f74:	d45a      	bmi.n	800202c <__sflush_r+0xc4>
 8001f76:	684b      	ldr	r3, [r1, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	dc05      	bgt.n	8001f88 <__sflush_r+0x20>
 8001f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dc02      	bgt.n	8001f88 <__sflush_r+0x20>
 8001f82:	2000      	movs	r0, #0
 8001f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f8a:	2e00      	cmp	r6, #0
 8001f8c:	d0f9      	beq.n	8001f82 <__sflush_r+0x1a>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f94:	682f      	ldr	r7, [r5, #0]
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	d033      	beq.n	8002002 <__sflush_r+0x9a>
 8001f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	075a      	lsls	r2, r3, #29
 8001fa0:	d505      	bpl.n	8001fae <__sflush_r+0x46>
 8001fa2:	6863      	ldr	r3, [r4, #4]
 8001fa4:	1ac0      	subs	r0, r0, r3
 8001fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fa8:	b10b      	cbz	r3, 8001fae <__sflush_r+0x46>
 8001faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fac:	1ac0      	subs	r0, r0, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fb4:	6a21      	ldr	r1, [r4, #32]
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	47b0      	blx	r6
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	d106      	bne.n	8001fce <__sflush_r+0x66>
 8001fc0:	6829      	ldr	r1, [r5, #0]
 8001fc2:	291d      	cmp	r1, #29
 8001fc4:	d84b      	bhi.n	800205e <__sflush_r+0xf6>
 8001fc6:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <__sflush_r+0x10c>)
 8001fc8:	40ca      	lsrs	r2, r1
 8001fca:	07d6      	lsls	r6, r2, #31
 8001fcc:	d547      	bpl.n	800205e <__sflush_r+0xf6>
 8001fce:	2200      	movs	r2, #0
 8001fd0:	6062      	str	r2, [r4, #4]
 8001fd2:	6922      	ldr	r2, [r4, #16]
 8001fd4:	04d9      	lsls	r1, r3, #19
 8001fd6:	6022      	str	r2, [r4, #0]
 8001fd8:	d504      	bpl.n	8001fe4 <__sflush_r+0x7c>
 8001fda:	1c42      	adds	r2, r0, #1
 8001fdc:	d101      	bne.n	8001fe2 <__sflush_r+0x7a>
 8001fde:	682b      	ldr	r3, [r5, #0]
 8001fe0:	b903      	cbnz	r3, 8001fe4 <__sflush_r+0x7c>
 8001fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8001fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fe6:	602f      	str	r7, [r5, #0]
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	d0ca      	beq.n	8001f82 <__sflush_r+0x1a>
 8001fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ff0:	4299      	cmp	r1, r3
 8001ff2:	d002      	beq.n	8001ffa <__sflush_r+0x92>
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	f000 f8ef 	bl	80021d8 <_free_r>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8001ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002002:	6a21      	ldr	r1, [r4, #32]
 8002004:	2301      	movs	r3, #1
 8002006:	4628      	mov	r0, r5
 8002008:	47b0      	blx	r6
 800200a:	1c41      	adds	r1, r0, #1
 800200c:	d1c6      	bne.n	8001f9c <__sflush_r+0x34>
 800200e:	682b      	ldr	r3, [r5, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0c3      	beq.n	8001f9c <__sflush_r+0x34>
 8002014:	2b1d      	cmp	r3, #29
 8002016:	d001      	beq.n	800201c <__sflush_r+0xb4>
 8002018:	2b16      	cmp	r3, #22
 800201a:	d101      	bne.n	8002020 <__sflush_r+0xb8>
 800201c:	602f      	str	r7, [r5, #0]
 800201e:	e7b0      	b.n	8001f82 <__sflush_r+0x1a>
 8002020:	89a3      	ldrh	r3, [r4, #12]
 8002022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002026:	81a3      	strh	r3, [r4, #12]
 8002028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800202c:	690f      	ldr	r7, [r1, #16]
 800202e:	2f00      	cmp	r7, #0
 8002030:	d0a7      	beq.n	8001f82 <__sflush_r+0x1a>
 8002032:	0793      	lsls	r3, r2, #30
 8002034:	bf18      	it	ne
 8002036:	2300      	movne	r3, #0
 8002038:	680e      	ldr	r6, [r1, #0]
 800203a:	bf08      	it	eq
 800203c:	694b      	ldreq	r3, [r1, #20]
 800203e:	eba6 0807 	sub.w	r8, r6, r7
 8002042:	600f      	str	r7, [r1, #0]
 8002044:	608b      	str	r3, [r1, #8]
 8002046:	f1b8 0f00 	cmp.w	r8, #0
 800204a:	dd9a      	ble.n	8001f82 <__sflush_r+0x1a>
 800204c:	4643      	mov	r3, r8
 800204e:	463a      	mov	r2, r7
 8002050:	6a21      	ldr	r1, [r4, #32]
 8002052:	4628      	mov	r0, r5
 8002054:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002056:	47b0      	blx	r6
 8002058:	2800      	cmp	r0, #0
 800205a:	dc07      	bgt.n	800206c <__sflush_r+0x104>
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002062:	81a3      	strh	r3, [r4, #12]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800206c:	4407      	add	r7, r0
 800206e:	eba8 0800 	sub.w	r8, r8, r0
 8002072:	e7e8      	b.n	8002046 <__sflush_r+0xde>
 8002074:	20400001 	.word	0x20400001

08002078 <_fflush_r>:
 8002078:	b538      	push	{r3, r4, r5, lr}
 800207a:	690b      	ldr	r3, [r1, #16]
 800207c:	4605      	mov	r5, r0
 800207e:	460c      	mov	r4, r1
 8002080:	b1db      	cbz	r3, 80020ba <_fflush_r+0x42>
 8002082:	b118      	cbz	r0, 800208c <_fflush_r+0x14>
 8002084:	6983      	ldr	r3, [r0, #24]
 8002086:	b90b      	cbnz	r3, 800208c <_fflush_r+0x14>
 8002088:	f7ff fa7a 	bl	8001580 <__sinit>
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <_fflush_r+0x48>)
 800208e:	429c      	cmp	r4, r3
 8002090:	d109      	bne.n	80020a6 <_fflush_r+0x2e>
 8002092:	686c      	ldr	r4, [r5, #4]
 8002094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002098:	b17b      	cbz	r3, 80020ba <_fflush_r+0x42>
 800209a:	4621      	mov	r1, r4
 800209c:	4628      	mov	r0, r5
 800209e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a2:	f7ff bf61 	b.w	8001f68 <__sflush_r>
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_fflush_r+0x4c>)
 80020a8:	429c      	cmp	r4, r3
 80020aa:	d101      	bne.n	80020b0 <_fflush_r+0x38>
 80020ac:	68ac      	ldr	r4, [r5, #8]
 80020ae:	e7f1      	b.n	8002094 <_fflush_r+0x1c>
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <_fflush_r+0x50>)
 80020b2:	429c      	cmp	r4, r3
 80020b4:	bf08      	it	eq
 80020b6:	68ec      	ldreq	r4, [r5, #12]
 80020b8:	e7ec      	b.n	8002094 <_fflush_r+0x1c>
 80020ba:	2000      	movs	r0, #0
 80020bc:	bd38      	pop	{r3, r4, r5, pc}
 80020be:	bf00      	nop
 80020c0:	080023c4 	.word	0x080023c4
 80020c4:	080023e4 	.word	0x080023e4
 80020c8:	080023a4 	.word	0x080023a4

080020cc <_lseek_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	4605      	mov	r5, r0
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	2200      	movs	r2, #0
 80020d6:	4c05      	ldr	r4, [pc, #20]	; (80020ec <_lseek_r+0x20>)
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	f000 f914 	bl	8002308 <_lseek>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d102      	bne.n	80020ea <_lseek_r+0x1e>
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	b103      	cbz	r3, 80020ea <_lseek_r+0x1e>
 80020e8:	602b      	str	r3, [r5, #0]
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	200000fc 	.word	0x200000fc

080020f0 <__swhatbuf_r>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	460e      	mov	r6, r1
 80020f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020f8:	b090      	sub	sp, #64	; 0x40
 80020fa:	2900      	cmp	r1, #0
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	da07      	bge.n	8002112 <__swhatbuf_r+0x22>
 8002102:	2300      	movs	r3, #0
 8002104:	602b      	str	r3, [r5, #0]
 8002106:	89b3      	ldrh	r3, [r6, #12]
 8002108:	061a      	lsls	r2, r3, #24
 800210a:	d410      	bmi.n	800212e <__swhatbuf_r+0x3e>
 800210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002110:	e00e      	b.n	8002130 <__swhatbuf_r+0x40>
 8002112:	aa01      	add	r2, sp, #4
 8002114:	f000 f8be 	bl	8002294 <_fstat_r>
 8002118:	2800      	cmp	r0, #0
 800211a:	dbf2      	blt.n	8002102 <__swhatbuf_r+0x12>
 800211c:	9a02      	ldr	r2, [sp, #8]
 800211e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002126:	425a      	negs	r2, r3
 8002128:	415a      	adcs	r2, r3
 800212a:	602a      	str	r2, [r5, #0]
 800212c:	e7ee      	b.n	800210c <__swhatbuf_r+0x1c>
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	2000      	movs	r0, #0
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	b010      	add	sp, #64	; 0x40
 8002136:	bd70      	pop	{r4, r5, r6, pc}

08002138 <__smakebuf_r>:
 8002138:	898b      	ldrh	r3, [r1, #12]
 800213a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800213c:	079d      	lsls	r5, r3, #30
 800213e:	4606      	mov	r6, r0
 8002140:	460c      	mov	r4, r1
 8002142:	d507      	bpl.n	8002154 <__smakebuf_r+0x1c>
 8002144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	6123      	str	r3, [r4, #16]
 800214c:	2301      	movs	r3, #1
 800214e:	6163      	str	r3, [r4, #20]
 8002150:	b002      	add	sp, #8
 8002152:	bd70      	pop	{r4, r5, r6, pc}
 8002154:	ab01      	add	r3, sp, #4
 8002156:	466a      	mov	r2, sp
 8002158:	f7ff ffca 	bl	80020f0 <__swhatbuf_r>
 800215c:	9900      	ldr	r1, [sp, #0]
 800215e:	4605      	mov	r5, r0
 8002160:	4630      	mov	r0, r6
 8002162:	f7ff fa97 	bl	8001694 <_malloc_r>
 8002166:	b948      	cbnz	r0, 800217c <__smakebuf_r+0x44>
 8002168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800216c:	059a      	lsls	r2, r3, #22
 800216e:	d4ef      	bmi.n	8002150 <__smakebuf_r+0x18>
 8002170:	f023 0303 	bic.w	r3, r3, #3
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	81a3      	strh	r3, [r4, #12]
 800217a:	e7e3      	b.n	8002144 <__smakebuf_r+0xc>
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <__smakebuf_r+0x7c>)
 800217e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002180:	89a3      	ldrh	r3, [r4, #12]
 8002182:	6020      	str	r0, [r4, #0]
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	81a3      	strh	r3, [r4, #12]
 800218a:	9b00      	ldr	r3, [sp, #0]
 800218c:	6120      	str	r0, [r4, #16]
 800218e:	6163      	str	r3, [r4, #20]
 8002190:	9b01      	ldr	r3, [sp, #4]
 8002192:	b15b      	cbz	r3, 80021ac <__smakebuf_r+0x74>
 8002194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002198:	4630      	mov	r0, r6
 800219a:	f000 f88d 	bl	80022b8 <_isatty_r>
 800219e:	b128      	cbz	r0, 80021ac <__smakebuf_r+0x74>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	81a3      	strh	r3, [r4, #12]
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	431d      	orrs	r5, r3
 80021b0:	81a5      	strh	r5, [r4, #12]
 80021b2:	e7cd      	b.n	8002150 <__smakebuf_r+0x18>
 80021b4:	08001501 	.word	0x08001501

080021b8 <memchr>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	b2c9      	uxtb	r1, r1
 80021bc:	4402      	add	r2, r0
 80021be:	4290      	cmp	r0, r2
 80021c0:	4603      	mov	r3, r0
 80021c2:	d101      	bne.n	80021c8 <memchr+0x10>
 80021c4:	2000      	movs	r0, #0
 80021c6:	bd10      	pop	{r4, pc}
 80021c8:	781c      	ldrb	r4, [r3, #0]
 80021ca:	3001      	adds	r0, #1
 80021cc:	428c      	cmp	r4, r1
 80021ce:	d1f6      	bne.n	80021be <memchr+0x6>
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd10      	pop	{r4, pc}

080021d4 <__malloc_lock>:
 80021d4:	4770      	bx	lr

080021d6 <__malloc_unlock>:
 80021d6:	4770      	bx	lr

080021d8 <_free_r>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4605      	mov	r5, r0
 80021dc:	2900      	cmp	r1, #0
 80021de:	d043      	beq.n	8002268 <_free_r+0x90>
 80021e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e4:	1f0c      	subs	r4, r1, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bfb8      	it	lt
 80021ea:	18e4      	addlt	r4, r4, r3
 80021ec:	f7ff fff2 	bl	80021d4 <__malloc_lock>
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <_free_r+0x94>)
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	4610      	mov	r0, r2
 80021f6:	b933      	cbnz	r3, 8002206 <_free_r+0x2e>
 80021f8:	6063      	str	r3, [r4, #4]
 80021fa:	6014      	str	r4, [r2, #0]
 80021fc:	4628      	mov	r0, r5
 80021fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002202:	f7ff bfe8 	b.w	80021d6 <__malloc_unlock>
 8002206:	42a3      	cmp	r3, r4
 8002208:	d90b      	bls.n	8002222 <_free_r+0x4a>
 800220a:	6821      	ldr	r1, [r4, #0]
 800220c:	1862      	adds	r2, r4, r1
 800220e:	4293      	cmp	r3, r2
 8002210:	bf01      	itttt	eq
 8002212:	681a      	ldreq	r2, [r3, #0]
 8002214:	685b      	ldreq	r3, [r3, #4]
 8002216:	1852      	addeq	r2, r2, r1
 8002218:	6022      	streq	r2, [r4, #0]
 800221a:	6063      	str	r3, [r4, #4]
 800221c:	6004      	str	r4, [r0, #0]
 800221e:	e7ed      	b.n	80021fc <_free_r+0x24>
 8002220:	4613      	mov	r3, r2
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	b10a      	cbz	r2, 800222a <_free_r+0x52>
 8002226:	42a2      	cmp	r2, r4
 8002228:	d9fa      	bls.n	8002220 <_free_r+0x48>
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	1858      	adds	r0, r3, r1
 800222e:	42a0      	cmp	r0, r4
 8002230:	d10b      	bne.n	800224a <_free_r+0x72>
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	4401      	add	r1, r0
 8002236:	1858      	adds	r0, r3, r1
 8002238:	4282      	cmp	r2, r0
 800223a:	6019      	str	r1, [r3, #0]
 800223c:	d1de      	bne.n	80021fc <_free_r+0x24>
 800223e:	6810      	ldr	r0, [r2, #0]
 8002240:	6852      	ldr	r2, [r2, #4]
 8002242:	4401      	add	r1, r0
 8002244:	6019      	str	r1, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e7d8      	b.n	80021fc <_free_r+0x24>
 800224a:	d902      	bls.n	8002252 <_free_r+0x7a>
 800224c:	230c      	movs	r3, #12
 800224e:	602b      	str	r3, [r5, #0]
 8002250:	e7d4      	b.n	80021fc <_free_r+0x24>
 8002252:	6820      	ldr	r0, [r4, #0]
 8002254:	1821      	adds	r1, r4, r0
 8002256:	428a      	cmp	r2, r1
 8002258:	bf01      	itttt	eq
 800225a:	6811      	ldreq	r1, [r2, #0]
 800225c:	6852      	ldreq	r2, [r2, #4]
 800225e:	1809      	addeq	r1, r1, r0
 8002260:	6021      	streq	r1, [r4, #0]
 8002262:	6062      	str	r2, [r4, #4]
 8002264:	605c      	str	r4, [r3, #4]
 8002266:	e7c9      	b.n	80021fc <_free_r+0x24>
 8002268:	bd38      	pop	{r3, r4, r5, pc}
 800226a:	bf00      	nop
 800226c:	200000ac 	.word	0x200000ac

08002270 <_read_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	4605      	mov	r5, r0
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	2200      	movs	r2, #0
 800227a:	4c05      	ldr	r4, [pc, #20]	; (8002290 <_read_r+0x20>)
 800227c:	6022      	str	r2, [r4, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f000 f84a 	bl	8002318 <_read>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_read_r+0x1e>
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	b103      	cbz	r3, 800228e <_read_r+0x1e>
 800228c:	602b      	str	r3, [r5, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	200000fc 	.word	0x200000fc

08002294 <_fstat_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	2300      	movs	r3, #0
 8002298:	4c06      	ldr	r4, [pc, #24]	; (80022b4 <_fstat_r+0x20>)
 800229a:	4605      	mov	r5, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	f000 f821 	bl	80022e8 <_fstat>
 80022a6:	1c43      	adds	r3, r0, #1
 80022a8:	d102      	bne.n	80022b0 <_fstat_r+0x1c>
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	b103      	cbz	r3, 80022b0 <_fstat_r+0x1c>
 80022ae:	602b      	str	r3, [r5, #0]
 80022b0:	bd38      	pop	{r3, r4, r5, pc}
 80022b2:	bf00      	nop
 80022b4:	200000fc 	.word	0x200000fc

080022b8 <_isatty_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	2300      	movs	r3, #0
 80022bc:	4c05      	ldr	r4, [pc, #20]	; (80022d4 <_isatty_r+0x1c>)
 80022be:	4605      	mov	r5, r0
 80022c0:	4608      	mov	r0, r1
 80022c2:	6023      	str	r3, [r4, #0]
 80022c4:	f000 f818 	bl	80022f8 <_isatty>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d102      	bne.n	80022d2 <_isatty_r+0x1a>
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	b103      	cbz	r3, 80022d2 <_isatty_r+0x1a>
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	200000fc 	.word	0x200000fc

080022d8 <_close>:
 80022d8:	2258      	movs	r2, #88	; 0x58
 80022da:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <_close+0xc>)
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4770      	bx	lr
 80022e4:	200000fc 	.word	0x200000fc

080022e8 <_fstat>:
 80022e8:	2258      	movs	r2, #88	; 0x58
 80022ea:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <_fstat+0xc>)
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	4770      	bx	lr
 80022f4:	200000fc 	.word	0x200000fc

080022f8 <_isatty>:
 80022f8:	2258      	movs	r2, #88	; 0x58
 80022fa:	4b02      	ldr	r3, [pc, #8]	; (8002304 <_isatty+0xc>)
 80022fc:	2000      	movs	r0, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200000fc 	.word	0x200000fc

08002308 <_lseek>:
 8002308:	2258      	movs	r2, #88	; 0x58
 800230a:	4b02      	ldr	r3, [pc, #8]	; (8002314 <_lseek+0xc>)
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4770      	bx	lr
 8002314:	200000fc 	.word	0x200000fc

08002318 <_read>:
 8002318:	2258      	movs	r2, #88	; 0x58
 800231a:	4b02      	ldr	r3, [pc, #8]	; (8002324 <_read+0xc>)
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	4770      	bx	lr
 8002324:	200000fc 	.word	0x200000fc

08002328 <_sbrk>:
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <_sbrk+0x14>)
 800232a:	4602      	mov	r2, r0
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	b909      	cbnz	r1, 8002334 <_sbrk+0xc>
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <_sbrk+0x18>)
 8002332:	6019      	str	r1, [r3, #0]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	4402      	add	r2, r0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	4770      	bx	lr
 800233c:	200000b4 	.word	0x200000b4
 8002340:	20000100 	.word	0x20000100

08002344 <_init>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	bf00      	nop
 8002348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234a:	bc08      	pop	{r3}
 800234c:	469e      	mov	lr, r3
 800234e:	4770      	bx	lr

08002350 <_fini>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr
